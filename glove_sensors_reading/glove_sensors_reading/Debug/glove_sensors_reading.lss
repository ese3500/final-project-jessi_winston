
glove_sensors_reading.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00001082  00001116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001082  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  0080011a  0080011a  00001130  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017b2  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d82  00000000  00000000  00002a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ac  00000000  00000000  000037d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00004180  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000739  00000000  00000000  000043dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000553  00000000  00000000  00004b15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__ctors_end>
       4:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
       8:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
       c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      10:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      14:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      18:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      1c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      20:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      24:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_9>
      28:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      2c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      30:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      34:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      38:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      3c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      40:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      44:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      48:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      4c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      50:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      54:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      58:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      5c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      60:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      64:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      68:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      6c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      70:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      74:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      78:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      7c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      80:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      84:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      88:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      8c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      90:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      94:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      98:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      9c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      a0:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      a4:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      a8:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      ac:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      b0:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      b4:	08 4a       	sbci	r16, 0xA8	; 168
      b6:	d7 3b       	cpi	r29, 0xB7	; 183
      b8:	3b ce       	rjmp	.-906    	; 0xfffffd30 <__eeprom_end+0xff7efd30>
      ba:	01 6e       	ori	r16, 0xE1	; 225
      bc:	84 bc       	out	0x24, r8	; 36
      be:	bf fd       	.word	0xfdbf	; ????
      c0:	c1 2f       	mov	r28, r17
      c2:	3d 6c       	ori	r19, 0xCD	; 205
      c4:	74 31       	cpi	r23, 0x14	; 20
      c6:	9a bd       	out	0x2a, r25	; 42
      c8:	56 83       	std	Z+6, r21	; 0x06
      ca:	3d da       	rcall	.-2950   	; 0xfffff546 <__eeprom_end+0xff7ef546>
      cc:	3d 00       	.word	0x003d	; ????
      ce:	c7 7f       	andi	r28, 0xF7	; 247
      d0:	11 be       	out	0x31, r1	; 49
      d2:	d9 e4       	ldi	r29, 0x49	; 73
      d4:	bb 4c       	sbci	r27, 0xCB	; 203
      d6:	3e 91       	ld	r19, -X
      d8:	6b aa       	std	Y+51, r6	; 0x33
      da:	aa be       	out	0x3a, r10	; 58
      dc:	00 00       	nop
      de:	00 80       	ld	r0, Z
      e0:	3f 07       	cpc	r19, r31
      e2:	63 42       	sbci	r22, 0x23	; 35
      e4:	36 b7       	in	r19, 0x36	; 54
      e6:	9b d8       	rcall	.-3786   	; 0xfffff21e <__eeprom_end+0xff7ef21e>
      e8:	a7 1a       	sub	r10, r23
      ea:	39 68       	ori	r19, 0x89	; 137
      ec:	56 18       	sub	r5, r6
      ee:	ae ba       	out	0x1e, r10	; 30
      f0:	ab 55       	subi	r26, 0x5B	; 91
      f2:	8c 1d       	adc	r24, r12
      f4:	3c b7       	in	r19, 0x3c	; 60
      f6:	cc 57       	subi	r28, 0x7C	; 124
      f8:	63 bd       	out	0x23, r22	; 35
      fa:	6d ed       	ldi	r22, 0xDD	; 221
      fc:	fd 75       	andi	r31, 0x5D	; 93
      fe:	3e f6       	brtc	.-114    	; 0x8e <__SREG__+0x4f>
     100:	17 72       	andi	r17, 0x27	; 39
     102:	31 bf       	out	0x31, r19	; 49
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	3f 08       	sbc	r3, r15
     10a:	00 00       	nop
     10c:	00 be       	out	0x30, r0	; 48
     10e:	92 24       	eor	r9, r2
     110:	49 12       	cpse	r4, r25
     112:	3e ab       	std	Y+54, r19	; 0x36
     114:	aa aa       	std	Y+50, r10	; 0x32
     116:	2a be       	out	0x3a, r2	; 58
     118:	cd cc       	rjmp	.-1638   	; 0xfffffab4 <__eeprom_end+0xff7efab4>
     11a:	cc 4c       	sbci	r28, 0xCC	; 204
     11c:	3e 00       	.word	0x003e	; ????
     11e:	00 00       	nop
     120:	80 be       	out	0x30, r8	; 48
     122:	ab aa       	std	Y+51, r10	; 0x33
     124:	aa aa       	std	Y+50, r10	; 0x32
     126:	3e 00       	.word	0x003e	; ????
     128:	00 00       	nop
     12a:	00 bf       	out	0x30, r16	; 48
     12c:	00 00       	nop
     12e:	00 80       	ld	r0, Z
     130:	3f 00       	.word	0x003f	; ????
     132:	00 00       	nop
     134:	00 00       	nop
     136:	08 41       	sbci	r16, 0x18	; 24
     138:	78 d3       	rcall	.+1776   	; 0x82a <UART_init+0x1a>
     13a:	bb 43       	sbci	r27, 0x3B	; 59
     13c:	87 d1       	rcall	.+782    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     13e:	13 3d       	cpi	r17, 0xD3	; 211
     140:	19 0e       	add	r1, r25
     142:	3c c3       	rjmp	.+1656   	; 0x7bc <get_MPU_readings+0x2c8>
     144:	bd 42       	sbci	r27, 0x2D	; 45
     146:	82 ad       	ldd	r24, Z+58	; 0x3a
     148:	2b 3e       	cpi	r18, 0xEB	; 235
     14a:	68 ec       	ldi	r22, 0xC8	; 200
     14c:	82 76       	andi	r24, 0x62	; 98
     14e:	be d9       	rcall	.-3204   	; 0xfffff4cc <__eeprom_end+0xff7ef4cc>
     150:	8f e1       	ldi	r24, 0x1F	; 31
     152:	a9 3e       	cpi	r26, 0xE9	; 233
     154:	4c 80       	ldd	r4, Y+4	; 0x04
     156:	ef ff       	.word	0xffef	; ????
     158:	be 01       	movw	r22, r28
     15a:	c4 ff       	sbrs	r28, 4
     15c:	7f 3f       	cpi	r23, 0xFF	; 255
     15e:	00 00       	nop
     160:	00 00       	nop
	...

00000164 <__ctors_end>:
     164:	11 24       	eor	r1, r1
     166:	1f be       	out	0x3f, r1	; 63
     168:	cf ef       	ldi	r28, 0xFF	; 255
     16a:	d8 e0       	ldi	r29, 0x08	; 8
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	cd bf       	out	0x3d, r28	; 61

00000170 <__do_copy_data>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a0 e0       	ldi	r26, 0x00	; 0
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	e2 e8       	ldi	r30, 0x82	; 130
     178:	f0 e1       	ldi	r31, 0x10	; 16
     17a:	02 c0       	rjmp	.+4      	; 0x180 <__do_copy_data+0x10>
     17c:	05 90       	lpm	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	aa 31       	cpi	r26, 0x1A	; 26
     182:	b1 07       	cpc	r27, r17
     184:	d9 f7       	brne	.-10     	; 0x17c <__do_copy_data+0xc>

00000186 <__do_clear_bss>:
     186:	21 e0       	ldi	r18, 0x01	; 1
     188:	aa e1       	ldi	r26, 0x1A	; 26
     18a:	b1 e0       	ldi	r27, 0x01	; 1
     18c:	01 c0       	rjmp	.+2      	; 0x190 <.do_clear_bss_start>

0000018e <.do_clear_bss_loop>:
     18e:	1d 92       	st	X+, r1

00000190 <.do_clear_bss_start>:
     190:	ac 35       	cpi	r26, 0x5C	; 92
     192:	b2 07       	cpc	r27, r18
     194:	e1 f7       	brne	.-8      	; 0x18e <.do_clear_bss_loop>
     196:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
     19a:	0c 94 3f 08 	jmp	0x107e	; 0x107e <_exit>

0000019e <__bad_interrupt>:
     19e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a2 <I2C_init>:
#include <math.h>
#include <util/twi.h>

// Initialization of I2C with 100 kHz SCL clock
void I2C_init(void){
	TWSR0 = 0x00; // TWPS[1:0] = 00 -> prescaler = 1
     1a2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR0 = 0x48; // TWBR = 72 => TWI clock = 100kHz, SCL frequency = F_CPU/(16 + 2(TWBR)*(TWSR prescale))
     1a6:	88 e4       	ldi	r24, 0x48	; 72
     1a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     1ac:	08 95       	ret

000001ae <I2C_start>:
	//TWCR0 = (1 << TWEN); // TWEN bit enables TWI0 operation and activates the TWI0interface
}

void I2C_start(void){
	// TWI enable/clear TWI Interrupt flag/START condition for TWI0 to become a Master
	TWCR0 = (1 << TWEN) | (1 << TWINT) |(1 << TWSTA);
     1ae:	84 ea       	ldi	r24, 0xA4	; 164
     1b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Wait for TWINT flag set, which indicates that the START condition has been transmitted
	while (!(TWCR0 & (1 << TWINT)));
     1b4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1b8:	88 23       	and	r24, r24
     1ba:	e4 f7       	brge	.-8      	; 0x1b4 <I2C_start+0x6>
	// Check value of TWI status register and mask the prescaler bits
	//if ((TWSR0 & 0xF8) != TW_START) return -1;
}
     1bc:	08 95       	ret

000001be <I2C_stop>:

void I2C_stop(void){
	// transmit STOP condition
	TWCR0 = (1 << TWEN) | (1 << TWINT) |(1 << TWSTO);
     1be:	84 e9       	ldi	r24, 0x94	; 148
     1c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1c4:	08 95       	ret

000001c6 <I2C_write>:
}

void I2C_write(uint8_t data){
	// load data into TWDR register
	TWDR0 = data;
     1c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	// Clear TWINT bit in TWCR to start transmission of data
	TWCR0 = (1 << TWINT) | (1 << TWEN);
     1ca:	84 e8       	ldi	r24, 0x84	; 132
     1cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Wait for TWINT flag set, which indicates that data has been transmitted and ACK/NACK has been received
	while (!(TWCR0 & (1 << TWINT)));
     1d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1d4:	88 23       	and	r24, r24
     1d6:	e4 f7       	brge	.-8      	; 0x1d0 <I2C_write+0xa>
	// Check value of TWI status register and mask prescaler bits
	//if ((TWSR0 & 0xF8) != TW_MT_SLA_ACK) return -1;
}
     1d8:	08 95       	ret

000001da <I2C_readACK>:

uint8_t I2C_readACK(){
	// The ACK pulse is generated on the TWI0 bus
	TWCR0 = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     1da:	84 ec       	ldi	r24, 0xC4	; 196
     1dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Wait for TWINT flag set, which indicates that data has been transmitted and ACK/NACK has been received
	while (!(TWCR0 & (1 << TWINT)));
     1e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1e4:	88 23       	and	r24, r24
     1e6:	e4 f7       	brge	.-8      	; 0x1e0 <I2C_readACK+0x6>
	
	return TWDR0;
     1e8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     1ec:	08 95       	ret

000001ee <I2C_readNACK>:

uint8_t I2C_readNACK(){
	// the device can be virtually disconnected from the 2-wire Serial Bus temporarily
	TWCR0 = (1 << TWINT)|(1 << TWEN);
     1ee:	84 e8       	ldi	r24, 0x84	; 132
     1f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Wait for TWINT flag set, which indicates that data has been transmitted and ACK/NACK has been received
	while (!(TWCR0 & (1 << TWINT)));
     1f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1f8:	88 23       	and	r24, r24
     1fa:	e4 f7       	brge	.-8      	; 0x1f4 <I2C_readNACK+0x6>

	return TWDR0;
     1fc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     200:	08 95       	ret

00000202 <I2C_status>:

uint8_t I2C_status(void)
{
	uint8_t status;
	//mask status
	status = TWSR0 & 0xF8;
     202:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	return status;
     206:	88 7f       	andi	r24, 0xF8	; 248
     208:	08 95       	ret

0000020a <ADC_initialize>:
int flex_sensor_reading;

void ADC_initialize() {
	// Setup for ADC (10bit = 0-1023)
	// Clear power reduction bit for ADC
	PRR0 &= ~(1 << PRADC);
     20a:	e4 e6       	ldi	r30, 0x64	; 100
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	8e 7f       	andi	r24, 0xFE	; 254
     212:	80 83       	st	Z, r24
	// Select Vref = AVcc
	ADMUX |= (1 << REFS0);
     214:	ac e7       	ldi	r26, 0x7C	; 124
     216:	b0 e0       	ldi	r27, 0x00	; 0
     218:	8c 91       	ld	r24, X
     21a:	80 64       	ori	r24, 0x40	; 64
     21c:	8c 93       	st	X, r24
	ADMUX &= ~(1 << REFS1);
     21e:	8c 91       	ld	r24, X
     220:	8f 77       	andi	r24, 0x7F	; 127
     222:	8c 93       	st	X, r24
	// Set the ADC clock div by 128
	// 16M/128=125kHz
	ADCSRA |= (1 << ADPS0);
     224:	ea e7       	ldi	r30, 0x7A	; 122
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	81 60       	ori	r24, 0x01	; 1
     22c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1);
     22e:	80 81       	ld	r24, Z
     230:	82 60       	ori	r24, 0x02	; 2
     232:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2);
     234:	80 81       	ld	r24, Z
     236:	84 60       	ori	r24, 0x04	; 4
     238:	80 83       	st	Z, r24
	// Select Channel ADC0 (pin C0)
	ADMUX &= ~(1 << MUX0);
     23a:	8c 91       	ld	r24, X
     23c:	8e 7f       	andi	r24, 0xFE	; 254
     23e:	8c 93       	st	X, r24
	ADMUX &= ~(1 << MUX1);
     240:	8c 91       	ld	r24, X
     242:	8d 7f       	andi	r24, 0xFD	; 253
     244:	8c 93       	st	X, r24
	ADMUX &= ~(1 << MUX2);
     246:	8c 91       	ld	r24, X
     248:	8b 7f       	andi	r24, 0xFB	; 251
     24a:	8c 93       	st	X, r24
	ADMUX &= ~(1 << MUX3);
     24c:	8c 91       	ld	r24, X
     24e:	87 7f       	andi	r24, 0xF7	; 247
     250:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE);   // Autotriggering of ADC
     252:	80 81       	ld	r24, Z
     254:	80 62       	ori	r24, 0x20	; 32
     256:	80 83       	st	Z, r24
	// Free running mode ADTS[2:0] = 000
	ADCSRB &= ~(1 << ADTS0);
     258:	ab e7       	ldi	r26, 0x7B	; 123
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	8c 91       	ld	r24, X
     25e:	8e 7f       	andi	r24, 0xFE	; 254
     260:	8c 93       	st	X, r24
	ADCSRB &= ~(1 << ADTS1);
     262:	8c 91       	ld	r24, X
     264:	8d 7f       	andi	r24, 0xFD	; 253
     266:	8c 93       	st	X, r24
	ADCSRB &= ~(1 << ADTS2);
     268:	8c 91       	ld	r24, X
     26a:	8b 7f       	andi	r24, 0xFB	; 251
     26c:	8c 93       	st	X, r24
	// Disable digital input buffer on ADC pin
	DIDR0 |= (1 << ADC0D);
     26e:	ae e7       	ldi	r26, 0x7E	; 126
     270:	b0 e0       	ldi	r27, 0x00	; 0
     272:	8c 91       	ld	r24, X
     274:	81 60       	ori	r24, 0x01	; 1
     276:	8c 93       	st	X, r24
	// Enable ADC
	ADCSRA |= (1 << ADEN);
     278:	80 81       	ld	r24, Z
     27a:	80 68       	ori	r24, 0x80	; 128
     27c:	80 83       	st	Z, r24
	// Start conversion
	ADCSRA |= (1 << ADSC);
     27e:	80 81       	ld	r24, Z
     280:	80 64       	ori	r24, 0x40	; 64
     282:	80 83       	st	Z, r24
     284:	08 95       	ret

00000286 <initialize>:
}
void initialize() {
	ADC_initialize(); // ADC initialization to read flex sensor at pin PC0
     286:	0e 94 05 01 	call	0x20a	; 0x20a <ADC_initialize>
	timer2_initialize(); // timer 2 initialization to calculate elapsed time in yaw (z-axis angle)
     28a:	0e 94 43 02 	call	0x486	; 0x486 <timer2_initialize>
	UART_init(UART_BAUD_PRESCALER);	
     28e:	87 e6       	ldi	r24, 0x67	; 103
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 08 04 	call	0x810	; 0x810 <UART_init>
	MPU_init(); // initialize MPU6050
     296:	0e 94 93 01 	call	0x326	; 0x326 <MPU_init>
	MPU_write(0x1A, 3); // configure the bandwidth and delay for accelerometer and gyroscope
     29a:	63 e0       	ldi	r22, 0x03	; 3
     29c:	8a e1       	ldi	r24, 0x1A	; 26
     29e:	0e 94 c2 01 	call	0x384	; 0x384 <MPU_write>
	MPU_write(0x1B, 0); // configure gyroscope range to default range +- 250 degree/second
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	8b e1       	ldi	r24, 0x1B	; 27
     2a6:	0e 94 c2 01 	call	0x384	; 0x384 <MPU_write>
	MPU_write(0x1C, 0); // configure accelerometer range to default range +- 2g
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	8c e1       	ldi	r24, 0x1C	; 28
     2ae:	0e 94 c2 01 	call	0x384	; 0x384 <MPU_write>
     2b2:	08 95       	ret

000002b4 <main>:
}
int main(void)
{
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	2a 97       	sbiw	r28, 0x0a	; 10
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	de bf       	out	0x3e, r29	; 62
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	cd bf       	out	0x3d, r28	; 61
	initialize(); // initialization of Timer2 and MPU
     2c8:	0e 94 43 01 	call	0x286	; 0x286 <initialize>
	overflowCount = 0;
     2cc:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <overflowCount>
     2d0:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <overflowCount+0x1>
     2d4:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <overflowCount+0x2>
     2d8:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <overflowCount+0x3>
	previous_time = 0;
     2dc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <previous_time>
     2e0:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <previous_time+0x1>
     2e4:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <previous_time+0x2>
     2e8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <previous_time+0x3>
	char bufferAcce[10]; // Buffer to hold the converted number
	char bufferStr2[10]; // Another buffer
    while (1) 
    {
		// Readings from FLEX SENSOR and MPU6050
		get_MPU_readings(); // needed readings sent to the arm: angleX, angleY, GyroZ_converted
     2ec:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <get_MPU_readings>
		flex_sensor_reading = ADC; // store the reading from ADC to flex_sensor_reading variable
     2f0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     2f4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     2f8:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <flex_sensor_reading+0x1>
     2fc:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <flex_sensor_reading>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     300:	4a e0       	ldi	r20, 0x0A	; 10
     302:	be 01       	movw	r22, r28
     304:	6f 5f       	subi	r22, 0xFF	; 255
     306:	7f 4f       	sbci	r23, 0xFF	; 255
     308:	0e 94 0a 08 	call	0x1014	; 0x1014 <__itoa_ncheck>
		// Print FLEX SENSOR READING to terminal
		itoa(flex_sensor_reading, bufferStr2, 10);
		UART_putstring("Flex sensor reading: ");
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	0e 94 1e 04 	call	0x83c	; 0x83c <UART_putstring>
		UART_putstring(bufferStr2);
     314:	ce 01       	movw	r24, r28
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	0e 94 1e 04 	call	0x83c	; 0x83c <UART_putstring>
		__PRINT_NEW_LINE__   // Make space between prints
     31c:	86 e1       	ldi	r24, 0x16	; 22
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	0e 94 1e 04 	call	0x83c	; 0x83c <UART_putstring>
     324:	e3 cf       	rjmp	.-58     	; 0x2ec <main+0x38>

00000326 <MPU_init>:
#include <util/twi.h>
#include <stdint.h>


uint8_t MPU_init(){
	I2C_init();
     326:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_init>
	I2C_start();
     32a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <I2C_start>
	if (I2C_status() != TW_START) return -1;
     32e:	0e 94 01 01 	call	0x202	; 0x202 <I2C_status>
     332:	88 30       	cpi	r24, 0x08	; 8
     334:	f9 f4       	brne	.+62     	; 0x374 <MPU_init+0x4e>
	I2C_write(((MPU6050 << 1) | TW_WRITE)); //TW_WRITE = 0 defined in twi.h
     336:	80 ed       	ldi	r24, 0xD0	; 208
     338:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_write>
	if (I2C_status() != TW_MT_SLA_ACK) return -1;
     33c:	0e 94 01 01 	call	0x202	; 0x202 <I2C_status>
     340:	88 31       	cpi	r24, 0x18	; 24
     342:	d1 f4       	brne	.+52     	; 0x378 <MPU_init+0x52>
	I2C_write(0x6B);//PWR_MGMT_1 address
     344:	8b e6       	ldi	r24, 0x6B	; 107
     346:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_write>
	if (I2C_status() != TW_MT_DATA_ACK) return -1;
     34a:	0e 94 01 01 	call	0x202	; 0x202 <I2C_status>
     34e:	88 32       	cpi	r24, 0x28	; 40
     350:	a9 f4       	brne	.+42     	; 0x37c <MPU_init+0x56>
	I2C_write(0);//set PWR_MGMT_1 to 0
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_write>
	if (I2C_status() != TW_MT_DATA_ACK) return -1;
     358:	0e 94 01 01 	call	0x202	; 0x202 <I2C_status>
     35c:	88 32       	cpi	r24, 0x28	; 40
     35e:	81 f4       	brne	.+32     	; 0x380 <MPU_init+0x5a>
	I2C_stop();
     360:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     364:	8f e9       	ldi	r24, 0x9F	; 159
     366:	9f e0       	ldi	r25, 0x0F	; 15
     368:	01 97       	sbiw	r24, 0x01	; 1
     36a:	f1 f7       	brne	.-4      	; 0x368 <MPU_init+0x42>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <MPU_init+0x48>
     36e:	00 00       	nop
	_delay_ms(1);//allow time for stop to be sent
	return 0;
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	08 95       	ret


uint8_t MPU_init(){
	I2C_init();
	I2C_start();
	if (I2C_status() != TW_START) return -1;
     374:	8f ef       	ldi	r24, 0xFF	; 255
     376:	08 95       	ret
	I2C_write(((MPU6050 << 1) | TW_WRITE)); //TW_WRITE = 0 defined in twi.h
	if (I2C_status() != TW_MT_SLA_ACK) return -1;
     378:	8f ef       	ldi	r24, 0xFF	; 255
     37a:	08 95       	ret
	I2C_write(0x6B);//PWR_MGMT_1 address
	if (I2C_status() != TW_MT_DATA_ACK) return -1;
     37c:	8f ef       	ldi	r24, 0xFF	; 255
     37e:	08 95       	ret
	I2C_write(0);//set PWR_MGMT_1 to 0
	if (I2C_status() != TW_MT_DATA_ACK) return -1;
     380:	8f ef       	ldi	r24, 0xFF	; 255
	I2C_stop();
	_delay_ms(1);//allow time for stop to be sent
	return 0;
}
     382:	08 95       	ret

00000384 <MPU_write>:

uint8_t MPU_write(uint8_t u8addr, uint8_t u8data){
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	c8 2f       	mov	r28, r24
     38a:	d6 2f       	mov	r29, r22
	I2C_init();
     38c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_init>
	I2C_start();
     390:	0e 94 d7 00 	call	0x1ae	; 0x1ae <I2C_start>
	if (I2C_status() != TW_START) return -1;
     394:	0e 94 01 01 	call	0x202	; 0x202 <I2C_status>
     398:	88 30       	cpi	r24, 0x08	; 8
     39a:	e9 f4       	brne	.+58     	; 0x3d6 <MPU_write+0x52>
	I2C_write(((MPU6050 << 1) | TW_WRITE)); //TW_WRITE = 0 defined in twi.h
     39c:	80 ed       	ldi	r24, 0xD0	; 208
     39e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_write>
	if (I2C_status() != TW_MT_SLA_ACK) return -1;
     3a2:	0e 94 01 01 	call	0x202	; 0x202 <I2C_status>
     3a6:	88 31       	cpi	r24, 0x18	; 24
     3a8:	c1 f4       	brne	.+48     	; 0x3da <MPU_write+0x56>
	I2C_write(u8addr);//set address
     3aa:	8c 2f       	mov	r24, r28
     3ac:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_write>
	if (I2C_status() != TW_MT_DATA_ACK) return -1;
     3b0:	0e 94 01 01 	call	0x202	; 0x202 <I2C_status>
     3b4:	88 32       	cpi	r24, 0x28	; 40
     3b6:	99 f4       	brne	.+38     	; 0x3de <MPU_write+0x5a>
	I2C_write(u8data);//set value
     3b8:	8d 2f       	mov	r24, r29
     3ba:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_write>
	if (I2C_status() != TW_MT_DATA_ACK) return -1;
     3be:	0e 94 01 01 	call	0x202	; 0x202 <I2C_status>
     3c2:	88 32       	cpi	r24, 0x28	; 40
     3c4:	71 f4       	brne	.+28     	; 0x3e2 <MPU_write+0x5e>
	I2C_stop();
     3c6:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ca:	85 e3       	ldi	r24, 0x35	; 53
     3cc:	8a 95       	dec	r24
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <MPU_write+0x48>
     3d0:	00 00       	nop
	_delay_us(10);//allow time for stop to be sent
	return 0;
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	07 c0       	rjmp	.+14     	; 0x3e4 <MPU_write+0x60>
}

uint8_t MPU_write(uint8_t u8addr, uint8_t u8data){
	I2C_init();
	I2C_start();
	if (I2C_status() != TW_START) return -1;
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
     3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <MPU_write+0x60>
	I2C_write(((MPU6050 << 1) | TW_WRITE)); //TW_WRITE = 0 defined in twi.h
	if (I2C_status() != TW_MT_SLA_ACK) return -1;
     3da:	8f ef       	ldi	r24, 0xFF	; 255
     3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <MPU_write+0x60>
	I2C_write(u8addr);//set address
	if (I2C_status() != TW_MT_DATA_ACK) return -1;
     3de:	8f ef       	ldi	r24, 0xFF	; 255
     3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <MPU_write+0x60>
	I2C_write(u8data);//set value
	if (I2C_status() != TW_MT_DATA_ACK) return -1;
     3e2:	8f ef       	ldi	r24, 0xFF	; 255
	I2C_stop();
	_delay_us(10);//allow time for stop to be sent
	return 0;
}
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <MPU_read>:

uint8_t MPU_read(uint8_t u8addr, int16_t *int16data){
     3ea:	0f 93       	push	r16
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
     3f0:	c8 2f       	mov	r28, r24
     3f2:	8b 01       	movw	r16, r22
	I2C_start();
     3f4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <I2C_start>
	if (I2C_status() != TW_START) return -1;
     3f8:	0e 94 01 01 	call	0x202	; 0x202 <I2C_status>
     3fc:	88 30       	cpi	r24, 0x08	; 8
     3fe:	b1 f5       	brne	.+108    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
	I2C_write(((MPU6050 << 1) | TW_WRITE)); //TW_WRITE = 0 defined in twi.h
     400:	80 ed       	ldi	r24, 0xD0	; 208
     402:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_write>
	if (I2C_status() != TW_MT_SLA_ACK) return -1;
     406:	0e 94 01 01 	call	0x202	; 0x202 <I2C_status>
     40a:	88 31       	cpi	r24, 0x18	; 24
     40c:	89 f5       	brne	.+98     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
	I2C_write(u8addr); //send reading address of MPU-6050
     40e:	8c 2f       	mov	r24, r28
     410:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_write>
	if (I2C_status() != TW_MT_DATA_ACK) return -1;
     414:	0e 94 01 01 	call	0x202	; 0x202 <I2C_status>
     418:	88 32       	cpi	r24, 0x28	; 40
     41a:	61 f5       	brne	.+88     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
	I2C_stop();
     41c:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_stop>
     420:	85 e3       	ldi	r24, 0x35	; 53
     422:	8a 95       	dec	r24
     424:	f1 f7       	brne	.-4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     426:	00 00       	nop
	_delay_us(10);//wait for data
	
	I2C_start();
     428:	0e 94 d7 00 	call	0x1ae	; 0x1ae <I2C_start>
	if (I2C_status() != TW_START) return -1;
     42c:	0e 94 01 01 	call	0x202	; 0x202 <I2C_status>
     430:	88 30       	cpi	r24, 0x08	; 8
     432:	11 f5       	brne	.+68     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
	I2C_write(((MPU6050 << 1) | TW_READ));//ask to read
     434:	81 ed       	ldi	r24, 0xD1	; 209
     436:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_write>
	if (I2C_status() != TW_MR_SLA_ACK) return -1;
     43a:	0e 94 01 01 	call	0x202	; 0x202 <I2C_status>
     43e:	80 34       	cpi	r24, 0x40	; 64
     440:	e9 f4       	brne	.+58     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
	
	*int16data = I2C_readACK() << 8; //significant 8 bits with acknowledge
     442:	0e 94 ed 00 	call	0x1da	; 0x1da <I2C_readACK>
     446:	f8 01       	movw	r30, r16
     448:	10 82       	st	Z, r1
     44a:	81 83       	std	Z+1, r24	; 0x01
	*int16data |= I2C_readNACK(); //no ACK after the last bytes.
     44c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_readNACK>
     450:	f8 01       	movw	r30, r16
     452:	20 81       	ld	r18, Z
     454:	31 81       	ldd	r19, Z+1	; 0x01
     456:	28 2b       	or	r18, r24
     458:	31 83       	std	Z+1, r19	; 0x01
     45a:	20 83       	st	Z, r18
	I2C_stop();
     45c:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_stop>
     460:	f5 e3       	ldi	r31, 0x35	; 53
     462:	fa 95       	dec	r31
     464:	f1 f7       	brne	.-4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     466:	00 00       	nop
	_delay_us(10);//wait for data
	return 0;
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	09 c0       	rjmp	.+18     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
	return 0;
}

uint8_t MPU_read(uint8_t u8addr, int16_t *int16data){
	I2C_start();
	if (I2C_status() != TW_START) return -1;
     46c:	8f ef       	ldi	r24, 0xFF	; 255
     46e:	07 c0       	rjmp	.+14     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
	I2C_write(((MPU6050 << 1) | TW_WRITE)); //TW_WRITE = 0 defined in twi.h
	if (I2C_status() != TW_MT_SLA_ACK) return -1;
     470:	8f ef       	ldi	r24, 0xFF	; 255
     472:	05 c0       	rjmp	.+10     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
	I2C_write(u8addr); //send reading address of MPU-6050
	if (I2C_status() != TW_MT_DATA_ACK) return -1;
     474:	8f ef       	ldi	r24, 0xFF	; 255
     476:	03 c0       	rjmp	.+6      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
	I2C_stop();
	_delay_us(10);//wait for data
	
	I2C_start();
	if (I2C_status() != TW_START) return -1;
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	01 c0       	rjmp	.+2      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
	I2C_write(((MPU6050 << 1) | TW_READ));//ask to read
	if (I2C_status() != TW_MR_SLA_ACK) return -1;
     47c:	8f ef       	ldi	r24, 0xFF	; 255
	*int16data = I2C_readACK() << 8; //significant 8 bits with acknowledge
	*int16data |= I2C_readNACK(); //no ACK after the last bytes.
	I2C_stop();
	_delay_us(10);//wait for data
	return 0;
}
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	08 95       	ret

00000486 <timer2_initialize>:

void timer2_initialize() {
	cli();
     486:	f8 94       	cli
	TCCR2A = 0;
     488:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
     48c:	e1 eb       	ldi	r30, 0xB1	; 177
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	10 82       	st	Z, r1
	TCNT2 = 0; // initialize TImer 2 value
     492:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	TCCR2B |= (1 << CS20) | (1 << CS21); // prescaler = 32
     496:	80 81       	ld	r24, Z
     498:	83 60       	ori	r24, 0x03	; 3
     49a:	80 83       	st	Z, r24
	TIMSK2 |= (1 << TOIE2); // enable overflow interrupt
     49c:	e0 e7       	ldi	r30, 0x70	; 112
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	81 60       	ori	r24, 0x01	; 1
     4a4:	80 83       	st	Z, r24
	sei();
     4a6:	78 94       	sei
     4a8:	08 95       	ret

000004aa <__vector_9>:
}
ISR(TIMER2_OVF_vect) {
     4aa:	1f 92       	push	r1
     4ac:	0f 92       	push	r0
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	0f 92       	push	r0
     4b2:	11 24       	eor	r1, r1
     4b4:	8f 93       	push	r24
     4b6:	9f 93       	push	r25
     4b8:	af 93       	push	r26
     4ba:	bf 93       	push	r27
	overflowCount++; // Increment overflow counter
     4bc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <overflowCount>
     4c0:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <overflowCount+0x1>
     4c4:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <overflowCount+0x2>
     4c8:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <overflowCount+0x3>
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	a1 1d       	adc	r26, r1
     4d0:	b1 1d       	adc	r27, r1
     4d2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <overflowCount>
     4d6:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <overflowCount+0x1>
     4da:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <overflowCount+0x2>
     4de:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <overflowCount+0x3>
}
     4e2:	bf 91       	pop	r27
     4e4:	af 91       	pop	r26
     4e6:	9f 91       	pop	r25
     4e8:	8f 91       	pop	r24
     4ea:	0f 90       	pop	r0
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	0f 90       	pop	r0
     4f0:	1f 90       	pop	r1
     4f2:	18 95       	reti

000004f4 <get_MPU_readings>:

void get_MPU_readings() {
     4f4:	4f 92       	push	r4
     4f6:	5f 92       	push	r5
     4f8:	6f 92       	push	r6
     4fa:	7f 92       	push	r7
     4fc:	8f 92       	push	r8
     4fe:	9f 92       	push	r9
     500:	af 92       	push	r10
     502:	bf 92       	push	r11
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	00 d0       	rcall	.+0      	; 0x512 <get_MPU_readings+0x1e>
     512:	00 d0       	rcall	.+0      	; 0x514 <get_MPU_readings+0x20>
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
	MPU_read(0x3B,&AcX);
     518:	6c e4       	ldi	r22, 0x4C	; 76
     51a:	71 e0       	ldi	r23, 0x01	; 1
     51c:	8b e3       	ldi	r24, 0x3B	; 59
     51e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <MPU_read>
	MPU_read(0x3D,&AcY);
     522:	6e e2       	ldi	r22, 0x2E	; 46
     524:	71 e0       	ldi	r23, 0x01	; 1
     526:	8d e3       	ldi	r24, 0x3D	; 61
     528:	0e 94 f5 01 	call	0x3ea	; 0x3ea <MPU_read>
	MPU_read(0x3F,&AcZ);
     52c:	64 e3       	ldi	r22, 0x34	; 52
     52e:	71 e0       	ldi	r23, 0x01	; 1
     530:	8f e3       	ldi	r24, 0x3F	; 63
     532:	0e 94 f5 01 	call	0x3ea	; 0x3ea <MPU_read>
	MPU_read(0x43,&GyroX);
     536:	62 e2       	ldi	r22, 0x22	; 34
     538:	71 e0       	ldi	r23, 0x01	; 1
     53a:	83 e4       	ldi	r24, 0x43	; 67
     53c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <MPU_read>
	MPU_read(0x43,&GyroX);
     540:	62 e2       	ldi	r22, 0x22	; 34
     542:	71 e0       	ldi	r23, 0x01	; 1
     544:	83 e4       	ldi	r24, 0x43	; 67
     546:	0e 94 f5 01 	call	0x3ea	; 0x3ea <MPU_read>
	MPU_read(0x45,&GyroY);
     54a:	66 e4       	ldi	r22, 0x46	; 70
     54c:	71 e0       	ldi	r23, 0x01	; 1
     54e:	85 e4       	ldi	r24, 0x45	; 69
     550:	0e 94 f5 01 	call	0x3ea	; 0x3ea <MPU_read>
	MPU_read(0x47,&GyroZ);
     554:	66 e5       	ldi	r22, 0x56	; 86
     556:	71 e0       	ldi	r23, 0x01	; 1
     558:	87 e4       	ldi	r24, 0x47	; 71
     55a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <MPU_read>
	// Convert ACCELEROMETER raw data to m/s with g = 9.8 m/s^2
	AcX_converted = (((float) AcX + 300) / 16384.0) * 9.8;
     55e:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <AcX>
     562:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <AcX+0x1>
     566:	07 2e       	mov	r0, r23
     568:	00 0c       	add	r0, r0
     56a:	88 0b       	sbc	r24, r24
     56c:	99 0b       	sbc	r25, r25
     56e:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	46 e9       	ldi	r20, 0x96	; 150
     578:	53 e4       	ldi	r21, 0x43	; 67
     57a:	0e 94 2c 04 	call	0x858	; 0x858 <__addsf3>
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	40 e8       	ldi	r20, 0x80	; 128
     584:	58 e3       	ldi	r21, 0x38	; 56
     586:	0e 94 f6 05 	call	0xbec	; 0xbec <__mulsf3>
     58a:	2d ec       	ldi	r18, 0xCD	; 205
     58c:	3c ec       	ldi	r19, 0xCC	; 204
     58e:	4c e1       	ldi	r20, 0x1C	; 28
     590:	51 e4       	ldi	r21, 0x41	; 65
     592:	0e 94 f6 05 	call	0xbec	; 0xbec <__mulsf3>
     596:	2b 01       	movw	r4, r22
     598:	3c 01       	movw	r6, r24
     59a:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <AcX_converted>
     59e:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <AcX_converted+0x1>
     5a2:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <AcX_converted+0x2>
     5a6:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <AcX_converted+0x3>
	AcY_converted = (((float) AcY - 890) / 16384.0) * 9.8;
     5aa:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <AcY>
     5ae:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <AcY+0x1>
     5b2:	07 2e       	mov	r0, r23
     5b4:	00 0c       	add	r0, r0
     5b6:	88 0b       	sbc	r24, r24
     5b8:	99 0b       	sbc	r25, r25
     5ba:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	30 e8       	ldi	r19, 0x80	; 128
     5c2:	4e e5       	ldi	r20, 0x5E	; 94
     5c4:	54 e4       	ldi	r21, 0x44	; 68
     5c6:	0e 94 2b 04 	call	0x856	; 0x856 <__subsf3>
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	40 e8       	ldi	r20, 0x80	; 128
     5d0:	58 e3       	ldi	r21, 0x38	; 56
     5d2:	0e 94 f6 05 	call	0xbec	; 0xbec <__mulsf3>
     5d6:	2d ec       	ldi	r18, 0xCD	; 205
     5d8:	3c ec       	ldi	r19, 0xCC	; 204
     5da:	4c e1       	ldi	r20, 0x1C	; 28
     5dc:	51 e4       	ldi	r21, 0x41	; 65
     5de:	0e 94 f6 05 	call	0xbec	; 0xbec <__mulsf3>
     5e2:	4b 01       	movw	r8, r22
     5e4:	5c 01       	movw	r10, r24
     5e6:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <AcY_converted>
     5ea:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <AcY_converted+0x1>
     5ee:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <AcY_converted+0x2>
     5f2:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <AcY_converted+0x3>
	AcZ_converted = (((float) AcZ + 484)/ 16384.0) * 9.8;
     5f6:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <AcZ>
     5fa:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <AcZ+0x1>
     5fe:	07 2e       	mov	r0, r23
     600:	00 0c       	add	r0, r0
     602:	88 0b       	sbc	r24, r24
     604:	99 0b       	sbc	r25, r25
     606:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	42 ef       	ldi	r20, 0xF2	; 242
     610:	53 e4       	ldi	r21, 0x43	; 67
     612:	0e 94 2c 04 	call	0x858	; 0x858 <__addsf3>
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	40 e8       	ldi	r20, 0x80	; 128
     61c:	58 e3       	ldi	r21, 0x38	; 56
     61e:	0e 94 f6 05 	call	0xbec	; 0xbec <__mulsf3>
     622:	2d ec       	ldi	r18, 0xCD	; 205
     624:	3c ec       	ldi	r19, 0xCC	; 204
     626:	4c e1       	ldi	r20, 0x1C	; 28
     628:	51 e4       	ldi	r21, 0x41	; 65
     62a:	0e 94 f6 05 	call	0xbec	; 0xbec <__mulsf3>
     62e:	6b 01       	movw	r12, r22
     630:	7c 01       	movw	r14, r24
     632:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <AcZ_converted>
     636:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <AcZ_converted+0x1>
     63a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <AcZ_converted+0x2>
     63e:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <AcZ_converted+0x3>
	// Convert GYROSCOPE raw data to degree/s
	GyroX_converted = ((float) GyroX + 140) / 131.0;
     642:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <GyroX>
     646:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <GyroX+0x1>
     64a:	07 2e       	mov	r0, r23
     64c:	00 0c       	add	r0, r0
     64e:	88 0b       	sbc	r24, r24
     650:	99 0b       	sbc	r25, r25
     652:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	4c e0       	ldi	r20, 0x0C	; 12
     65c:	53 e4       	ldi	r21, 0x43	; 67
     65e:	0e 94 2c 04 	call	0x858	; 0x858 <__addsf3>
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	43 e0       	ldi	r20, 0x03	; 3
     668:	53 e4       	ldi	r21, 0x43	; 67
     66a:	0e 94 c7 04 	call	0x98e	; 0x98e <__divsf3>
     66e:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <GyroX_converted>
     672:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <GyroX_converted+0x1>
     676:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <GyroX_converted+0x2>
     67a:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <GyroX_converted+0x3>
	GyroY_converted = ((float) GyroY + 75) / 131.0;
     67e:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <GyroY>
     682:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <GyroY+0x1>
     686:	07 2e       	mov	r0, r23
     688:	00 0c       	add	r0, r0
     68a:	88 0b       	sbc	r24, r24
     68c:	99 0b       	sbc	r25, r25
     68e:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	46 e9       	ldi	r20, 0x96	; 150
     698:	52 e4       	ldi	r21, 0x42	; 66
     69a:	0e 94 2c 04 	call	0x858	; 0x858 <__addsf3>
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	43 e0       	ldi	r20, 0x03	; 3
     6a4:	53 e4       	ldi	r21, 0x43	; 67
     6a6:	0e 94 c7 04 	call	0x98e	; 0x98e <__divsf3>
     6aa:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <__data_end>
     6ae:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <__data_end+0x1>
     6b2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end+0x2>
     6b6:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x3>
	GyroZ_converted = ((float) GyroZ - 135) / 131.0;
     6ba:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <GyroZ>
     6be:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <GyroZ+0x1>
     6c2:	07 2e       	mov	r0, r23
     6c4:	00 0c       	add	r0, r0
     6c6:	88 0b       	sbc	r24, r24
     6c8:	99 0b       	sbc	r25, r25
     6ca:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	47 e0       	ldi	r20, 0x07	; 7
     6d4:	53 e4       	ldi	r21, 0x43	; 67
     6d6:	0e 94 2b 04 	call	0x856	; 0x856 <__subsf3>
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	43 e0       	ldi	r20, 0x03	; 3
     6e0:	53 e4       	ldi	r21, 0x43	; 67
     6e2:	0e 94 c7 04 	call	0x98e	; 0x98e <__divsf3>
     6e6:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <GyroZ_converted>
     6ea:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <GyroZ_converted+0x1>
     6ee:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <GyroZ_converted+0x2>
     6f2:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <GyroZ_converted+0x3>
	// Rotational angle around X, Y axis (ROLL ~ X, PITCH ~ Y)
	angleX = (atan(AcY_converted / sqrt(pow(AcX_converted, 2) + pow(AcZ_converted, 2))) * 180 / PI) + 0.60;
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	50 e4       	ldi	r21, 0x40	; 64
     6fe:	c3 01       	movw	r24, r6
     700:	b2 01       	movw	r22, r4
     702:	0e 94 63 06 	call	0xcc6	; 0xcc6 <pow>
     706:	69 83       	std	Y+1, r22	; 0x01
     708:	7a 83       	std	Y+2, r23	; 0x02
     70a:	8b 83       	std	Y+3, r24	; 0x03
     70c:	9c 83       	std	Y+4, r25	; 0x04
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	50 e4       	ldi	r21, 0x40	; 64
     716:	c7 01       	movw	r24, r14
     718:	b6 01       	movw	r22, r12
     71a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <pow>
     71e:	6b 01       	movw	r12, r22
     720:	7c 01       	movw	r14, r24
     722:	a7 01       	movw	r20, r14
     724:	96 01       	movw	r18, r12
     726:	69 81       	ldd	r22, Y+1	; 0x01
     728:	7a 81       	ldd	r23, Y+2	; 0x02
     72a:	8b 81       	ldd	r24, Y+3	; 0x03
     72c:	9c 81       	ldd	r25, Y+4	; 0x04
     72e:	0e 94 2c 04 	call	0x858	; 0x858 <__addsf3>
     732:	0e 94 b9 06 	call	0xd72	; 0xd72 <sqrt>
     736:	9b 01       	movw	r18, r22
     738:	ac 01       	movw	r20, r24
     73a:	c5 01       	movw	r24, r10
     73c:	b4 01       	movw	r22, r8
     73e:	0e 94 c7 04 	call	0x98e	; 0x98e <__divsf3>
     742:	0e 94 98 04 	call	0x930	; 0x930 <atan>
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	44 e3       	ldi	r20, 0x34	; 52
     74c:	53 e4       	ldi	r21, 0x43	; 67
     74e:	0e 94 f6 05 	call	0xbec	; 0xbec <__mulsf3>
     752:	2b ed       	ldi	r18, 0xDB	; 219
     754:	3f e0       	ldi	r19, 0x0F	; 15
     756:	49 e4       	ldi	r20, 0x49	; 73
     758:	50 e4       	ldi	r21, 0x40	; 64
     75a:	0e 94 c7 04 	call	0x98e	; 0x98e <__divsf3>
     75e:	2a e9       	ldi	r18, 0x9A	; 154
     760:	39 e9       	ldi	r19, 0x99	; 153
     762:	49 e1       	ldi	r20, 0x19	; 25
     764:	5f e3       	ldi	r21, 0x3F	; 63
     766:	0e 94 2c 04 	call	0x858	; 0x858 <__addsf3>
     76a:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <angleX>
     76e:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <angleX+0x1>
     772:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <angleX+0x2>
     776:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <angleX+0x3>
	angleY = (atan(-1 * AcX_converted / sqrt(pow(AcY_converted, 2) + pow(AcZ_converted, 2))) * 180 / PI) -4.0;
     77a:	77 fa       	bst	r7, 7
     77c:	70 94       	com	r7
     77e:	77 f8       	bld	r7, 7
     780:	70 94       	com	r7
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	40 e0       	ldi	r20, 0x00	; 0
     788:	50 e4       	ldi	r21, 0x40	; 64
     78a:	c5 01       	movw	r24, r10
     78c:	b4 01       	movw	r22, r8
     78e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <pow>
     792:	4b 01       	movw	r8, r22
     794:	5c 01       	movw	r10, r24
     796:	a5 01       	movw	r20, r10
     798:	94 01       	movw	r18, r8
     79a:	c7 01       	movw	r24, r14
     79c:	b6 01       	movw	r22, r12
     79e:	0e 94 2c 04 	call	0x858	; 0x858 <__addsf3>
     7a2:	0e 94 b9 06 	call	0xd72	; 0xd72 <sqrt>
     7a6:	9b 01       	movw	r18, r22
     7a8:	ac 01       	movw	r20, r24
     7aa:	c3 01       	movw	r24, r6
     7ac:	b2 01       	movw	r22, r4
     7ae:	0e 94 c7 04 	call	0x98e	; 0x98e <__divsf3>
     7b2:	0e 94 98 04 	call	0x930	; 0x930 <atan>
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	44 e3       	ldi	r20, 0x34	; 52
     7bc:	53 e4       	ldi	r21, 0x43	; 67
     7be:	0e 94 f6 05 	call	0xbec	; 0xbec <__mulsf3>
     7c2:	2b ed       	ldi	r18, 0xDB	; 219
     7c4:	3f e0       	ldi	r19, 0x0F	; 15
     7c6:	49 e4       	ldi	r20, 0x49	; 73
     7c8:	50 e4       	ldi	r21, 0x40	; 64
     7ca:	0e 94 c7 04 	call	0x98e	; 0x98e <__divsf3>
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e8       	ldi	r20, 0x80	; 128
     7d4:	50 e4       	ldi	r21, 0x40	; 64
     7d6:	0e 94 2b 04 	call	0x856	; 0x856 <__subsf3>
     7da:	60 93 52 01 	sts	0x0152, r22	; 0x800152 <angleY>
     7de:	70 93 53 01 	sts	0x0153, r23	; 0x800153 <angleY+0x1>
     7e2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <angleY+0x2>
     7e6:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <angleY+0x3>
}
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	bf 90       	pop	r11
     800:	af 90       	pop	r10
     802:	9f 90       	pop	r9
     804:	8f 90       	pop	r8
     806:	7f 90       	pop	r7
     808:	6f 90       	pop	r6
     80a:	5f 90       	pop	r5
     80c:	4f 90       	pop	r4
     80e:	08 95       	ret

00000810 <UART_init>:

void UART_init(int BAUD_PRESCALER)
{
  
  /*Set baud rate */
  UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
     810:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  UBRR0L = (unsigned char)BAUD_PRESCALER;
     814:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  //Enable receiver and transmitter 
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     818:	88 e1       	ldi	r24, 0x18	; 24
     81a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  /* Set frame format: 2 stop bits, 8 data bits */
  UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 data bits
     81e:	e2 ec       	ldi	r30, 0xC2	; 194
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	86 e0       	ldi	r24, 0x06	; 6
     824:	80 83       	st	Z, r24
  UCSR0C |= (1<<USBS0); // 2 stop bits
     826:	80 81       	ld	r24, Z
     828:	88 60       	ori	r24, 0x08	; 8
     82a:	80 83       	st	Z, r24
     82c:	08 95       	ret

0000082e <UART_send>:
}

void UART_send(unsigned char data)
{
  // Wait for empty transmit buffer
  while(!(UCSR0A & (1<<UDRE0)));
     82e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     832:	95 ff       	sbrs	r25, 5
     834:	fc cf       	rjmp	.-8      	; 0x82e <UART_send>
  // Put data into buffer and send data
  UDR0 = data;
     836:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     83a:	08 95       	ret

0000083c <UART_putstring>:
  
}

void UART_putstring(char* StringPtr)
{
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	ec 01       	movw	r28, r24
  while(*StringPtr != 0x00)
     842:	03 c0       	rjmp	.+6      	; 0x84a <UART_putstring+0xe>
  {
    UART_send(*StringPtr);
     844:	0e 94 17 04 	call	0x82e	; 0x82e <UART_send>
  StringPtr++;
     848:	21 96       	adiw	r28, 0x01	; 1
  
}

void UART_putstring(char* StringPtr)
{
  while(*StringPtr != 0x00)
     84a:	88 81       	ld	r24, Y
     84c:	81 11       	cpse	r24, r1
     84e:	fa cf       	rjmp	.-12     	; 0x844 <UART_putstring+0x8>
  {
    UART_send(*StringPtr);
  StringPtr++;
  }
}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <__subsf3>:
     856:	50 58       	subi	r21, 0x80	; 128

00000858 <__addsf3>:
     858:	bb 27       	eor	r27, r27
     85a:	aa 27       	eor	r26, r26
     85c:	0e 94 43 04 	call	0x886	; 0x886 <__addsf3x>
     860:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_round>
     864:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fp_pscA>
     868:	38 f0       	brcs	.+14     	; 0x878 <__addsf3+0x20>
     86a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_pscB>
     86e:	20 f0       	brcs	.+8      	; 0x878 <__addsf3+0x20>
     870:	39 f4       	brne	.+14     	; 0x880 <__addsf3+0x28>
     872:	9f 3f       	cpi	r25, 0xFF	; 255
     874:	19 f4       	brne	.+6      	; 0x87c <__addsf3+0x24>
     876:	26 f4       	brtc	.+8      	; 0x880 <__addsf3+0x28>
     878:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_nan>
     87c:	0e f4       	brtc	.+2      	; 0x880 <__addsf3+0x28>
     87e:	e0 95       	com	r30
     880:	e7 fb       	bst	r30, 7
     882:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_inf>

00000886 <__addsf3x>:
     886:	e9 2f       	mov	r30, r25
     888:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__fp_split3>
     88c:	58 f3       	brcs	.-42     	; 0x864 <__addsf3+0xc>
     88e:	ba 17       	cp	r27, r26
     890:	62 07       	cpc	r22, r18
     892:	73 07       	cpc	r23, r19
     894:	84 07       	cpc	r24, r20
     896:	95 07       	cpc	r25, r21
     898:	20 f0       	brcs	.+8      	; 0x8a2 <__addsf3x+0x1c>
     89a:	79 f4       	brne	.+30     	; 0x8ba <__addsf3x+0x34>
     89c:	a6 f5       	brtc	.+104    	; 0x906 <__stack+0x7>
     89e:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__fp_zero>
     8a2:	0e f4       	brtc	.+2      	; 0x8a6 <__addsf3x+0x20>
     8a4:	e0 95       	com	r30
     8a6:	0b 2e       	mov	r0, r27
     8a8:	ba 2f       	mov	r27, r26
     8aa:	a0 2d       	mov	r26, r0
     8ac:	0b 01       	movw	r0, r22
     8ae:	b9 01       	movw	r22, r18
     8b0:	90 01       	movw	r18, r0
     8b2:	0c 01       	movw	r0, r24
     8b4:	ca 01       	movw	r24, r20
     8b6:	a0 01       	movw	r20, r0
     8b8:	11 24       	eor	r1, r1
     8ba:	ff 27       	eor	r31, r31
     8bc:	59 1b       	sub	r21, r25
     8be:	99 f0       	breq	.+38     	; 0x8e6 <__addsf3x+0x60>
     8c0:	59 3f       	cpi	r21, 0xF9	; 249
     8c2:	50 f4       	brcc	.+20     	; 0x8d8 <__addsf3x+0x52>
     8c4:	50 3e       	cpi	r21, 0xE0	; 224
     8c6:	68 f1       	brcs	.+90     	; 0x922 <__stack+0x23>
     8c8:	1a 16       	cp	r1, r26
     8ca:	f0 40       	sbci	r31, 0x00	; 0
     8cc:	a2 2f       	mov	r26, r18
     8ce:	23 2f       	mov	r18, r19
     8d0:	34 2f       	mov	r19, r20
     8d2:	44 27       	eor	r20, r20
     8d4:	58 5f       	subi	r21, 0xF8	; 248
     8d6:	f3 cf       	rjmp	.-26     	; 0x8be <__addsf3x+0x38>
     8d8:	46 95       	lsr	r20
     8da:	37 95       	ror	r19
     8dc:	27 95       	ror	r18
     8de:	a7 95       	ror	r26
     8e0:	f0 40       	sbci	r31, 0x00	; 0
     8e2:	53 95       	inc	r21
     8e4:	c9 f7       	brne	.-14     	; 0x8d8 <__addsf3x+0x52>
     8e6:	7e f4       	brtc	.+30     	; 0x906 <__stack+0x7>
     8e8:	1f 16       	cp	r1, r31
     8ea:	ba 0b       	sbc	r27, r26
     8ec:	62 0b       	sbc	r22, r18
     8ee:	73 0b       	sbc	r23, r19
     8f0:	84 0b       	sbc	r24, r20
     8f2:	ba f0       	brmi	.+46     	; 0x922 <__stack+0x23>
     8f4:	91 50       	subi	r25, 0x01	; 1
     8f6:	a1 f0       	breq	.+40     	; 0x920 <__stack+0x21>
     8f8:	ff 0f       	add	r31, r31
     8fa:	bb 1f       	adc	r27, r27
     8fc:	66 1f       	adc	r22, r22
     8fe:	77 1f       	adc	r23, r23
     900:	88 1f       	adc	r24, r24
     902:	c2 f7       	brpl	.-16     	; 0x8f4 <__addsf3x+0x6e>
     904:	0e c0       	rjmp	.+28     	; 0x922 <__stack+0x23>
     906:	ba 0f       	add	r27, r26
     908:	62 1f       	adc	r22, r18
     90a:	73 1f       	adc	r23, r19
     90c:	84 1f       	adc	r24, r20
     90e:	48 f4       	brcc	.+18     	; 0x922 <__stack+0x23>
     910:	87 95       	ror	r24
     912:	77 95       	ror	r23
     914:	67 95       	ror	r22
     916:	b7 95       	ror	r27
     918:	f7 95       	ror	r31
     91a:	9e 3f       	cpi	r25, 0xFE	; 254
     91c:	08 f0       	brcs	.+2      	; 0x920 <__stack+0x21>
     91e:	b0 cf       	rjmp	.-160    	; 0x880 <__addsf3+0x28>
     920:	93 95       	inc	r25
     922:	88 0f       	add	r24, r24
     924:	08 f0       	brcs	.+2      	; 0x928 <__stack+0x29>
     926:	99 27       	eor	r25, r25
     928:	ee 0f       	add	r30, r30
     92a:	97 95       	ror	r25
     92c:	87 95       	ror	r24
     92e:	08 95       	ret

00000930 <atan>:
     930:	df 93       	push	r29
     932:	dd 27       	eor	r29, r29
     934:	b9 2f       	mov	r27, r25
     936:	bf 77       	andi	r27, 0x7F	; 127
     938:	40 e8       	ldi	r20, 0x80	; 128
     93a:	5f e3       	ldi	r21, 0x3F	; 63
     93c:	16 16       	cp	r1, r22
     93e:	17 06       	cpc	r1, r23
     940:	48 07       	cpc	r20, r24
     942:	5b 07       	cpc	r21, r27
     944:	18 f4       	brcc	.+6      	; 0x94c <atan+0x1c>
     946:	d9 2f       	mov	r29, r25
     948:	0e 94 ee 05 	call	0xbdc	; 0xbdc <inverse>
     94c:	9f 93       	push	r25
     94e:	8f 93       	push	r24
     950:	7f 93       	push	r23
     952:	6f 93       	push	r22
     954:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <square>
     958:	e4 eb       	ldi	r30, 0xB4	; 180
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	0e 94 7f 05 	call	0xafe	; 0xafe <__fp_powser>
     960:	0e 94 b4 05 	call	0xb68	; 0xb68 <__fp_round>
     964:	2f 91       	pop	r18
     966:	3f 91       	pop	r19
     968:	4f 91       	pop	r20
     96a:	5f 91       	pop	r21
     96c:	0e 94 09 06 	call	0xc12	; 0xc12 <__mulsf3x>
     970:	dd 23       	and	r29, r29
     972:	51 f0       	breq	.+20     	; 0x988 <atan+0x58>
     974:	90 58       	subi	r25, 0x80	; 128
     976:	a2 ea       	ldi	r26, 0xA2	; 162
     978:	2a ed       	ldi	r18, 0xDA	; 218
     97a:	3f e0       	ldi	r19, 0x0F	; 15
     97c:	49 ec       	ldi	r20, 0xC9	; 201
     97e:	5f e3       	ldi	r21, 0x3F	; 63
     980:	d0 78       	andi	r29, 0x80	; 128
     982:	5d 27       	eor	r21, r29
     984:	0e 94 43 04 	call	0x886	; 0x886 <__addsf3x>
     988:	df 91       	pop	r29
     98a:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_round>

0000098e <__divsf3>:
     98e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__divsf3x>
     992:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_round>
     996:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_pscB>
     99a:	58 f0       	brcs	.+22     	; 0x9b2 <__divsf3+0x24>
     99c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fp_pscA>
     9a0:	40 f0       	brcs	.+16     	; 0x9b2 <__divsf3+0x24>
     9a2:	29 f4       	brne	.+10     	; 0x9ae <__divsf3+0x20>
     9a4:	5f 3f       	cpi	r21, 0xFF	; 255
     9a6:	29 f0       	breq	.+10     	; 0x9b2 <__divsf3+0x24>
     9a8:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_inf>
     9ac:	51 11       	cpse	r21, r1
     9ae:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_szero>
     9b2:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_nan>

000009b6 <__divsf3x>:
     9b6:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__fp_split3>
     9ba:	68 f3       	brcs	.-38     	; 0x996 <__divsf3+0x8>

000009bc <__divsf3_pse>:
     9bc:	99 23       	and	r25, r25
     9be:	b1 f3       	breq	.-20     	; 0x9ac <__divsf3+0x1e>
     9c0:	55 23       	and	r21, r21
     9c2:	91 f3       	breq	.-28     	; 0x9a8 <__divsf3+0x1a>
     9c4:	95 1b       	sub	r25, r21
     9c6:	55 0b       	sbc	r21, r21
     9c8:	bb 27       	eor	r27, r27
     9ca:	aa 27       	eor	r26, r26
     9cc:	62 17       	cp	r22, r18
     9ce:	73 07       	cpc	r23, r19
     9d0:	84 07       	cpc	r24, r20
     9d2:	38 f0       	brcs	.+14     	; 0x9e2 <__divsf3_pse+0x26>
     9d4:	9f 5f       	subi	r25, 0xFF	; 255
     9d6:	5f 4f       	sbci	r21, 0xFF	; 255
     9d8:	22 0f       	add	r18, r18
     9da:	33 1f       	adc	r19, r19
     9dc:	44 1f       	adc	r20, r20
     9de:	aa 1f       	adc	r26, r26
     9e0:	a9 f3       	breq	.-22     	; 0x9cc <__divsf3_pse+0x10>
     9e2:	35 d0       	rcall	.+106    	; 0xa4e <__divsf3_pse+0x92>
     9e4:	0e 2e       	mov	r0, r30
     9e6:	3a f0       	brmi	.+14     	; 0x9f6 <__divsf3_pse+0x3a>
     9e8:	e0 e8       	ldi	r30, 0x80	; 128
     9ea:	32 d0       	rcall	.+100    	; 0xa50 <__divsf3_pse+0x94>
     9ec:	91 50       	subi	r25, 0x01	; 1
     9ee:	50 40       	sbci	r21, 0x00	; 0
     9f0:	e6 95       	lsr	r30
     9f2:	00 1c       	adc	r0, r0
     9f4:	ca f7       	brpl	.-14     	; 0x9e8 <__divsf3_pse+0x2c>
     9f6:	2b d0       	rcall	.+86     	; 0xa4e <__divsf3_pse+0x92>
     9f8:	fe 2f       	mov	r31, r30
     9fa:	29 d0       	rcall	.+82     	; 0xa4e <__divsf3_pse+0x92>
     9fc:	66 0f       	add	r22, r22
     9fe:	77 1f       	adc	r23, r23
     a00:	88 1f       	adc	r24, r24
     a02:	bb 1f       	adc	r27, r27
     a04:	26 17       	cp	r18, r22
     a06:	37 07       	cpc	r19, r23
     a08:	48 07       	cpc	r20, r24
     a0a:	ab 07       	cpc	r26, r27
     a0c:	b0 e8       	ldi	r27, 0x80	; 128
     a0e:	09 f0       	breq	.+2      	; 0xa12 <__divsf3_pse+0x56>
     a10:	bb 0b       	sbc	r27, r27
     a12:	80 2d       	mov	r24, r0
     a14:	bf 01       	movw	r22, r30
     a16:	ff 27       	eor	r31, r31
     a18:	93 58       	subi	r25, 0x83	; 131
     a1a:	5f 4f       	sbci	r21, 0xFF	; 255
     a1c:	3a f0       	brmi	.+14     	; 0xa2c <__divsf3_pse+0x70>
     a1e:	9e 3f       	cpi	r25, 0xFE	; 254
     a20:	51 05       	cpc	r21, r1
     a22:	78 f0       	brcs	.+30     	; 0xa42 <__divsf3_pse+0x86>
     a24:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_inf>
     a28:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_szero>
     a2c:	5f 3f       	cpi	r21, 0xFF	; 255
     a2e:	e4 f3       	brlt	.-8      	; 0xa28 <__divsf3_pse+0x6c>
     a30:	98 3e       	cpi	r25, 0xE8	; 232
     a32:	d4 f3       	brlt	.-12     	; 0xa28 <__divsf3_pse+0x6c>
     a34:	86 95       	lsr	r24
     a36:	77 95       	ror	r23
     a38:	67 95       	ror	r22
     a3a:	b7 95       	ror	r27
     a3c:	f7 95       	ror	r31
     a3e:	9f 5f       	subi	r25, 0xFF	; 255
     a40:	c9 f7       	brne	.-14     	; 0xa34 <__divsf3_pse+0x78>
     a42:	88 0f       	add	r24, r24
     a44:	91 1d       	adc	r25, r1
     a46:	96 95       	lsr	r25
     a48:	87 95       	ror	r24
     a4a:	97 f9       	bld	r25, 7
     a4c:	08 95       	ret
     a4e:	e1 e0       	ldi	r30, 0x01	; 1
     a50:	66 0f       	add	r22, r22
     a52:	77 1f       	adc	r23, r23
     a54:	88 1f       	adc	r24, r24
     a56:	bb 1f       	adc	r27, r27
     a58:	62 17       	cp	r22, r18
     a5a:	73 07       	cpc	r23, r19
     a5c:	84 07       	cpc	r24, r20
     a5e:	ba 07       	cpc	r27, r26
     a60:	20 f0       	brcs	.+8      	; 0xa6a <__divsf3_pse+0xae>
     a62:	62 1b       	sub	r22, r18
     a64:	73 0b       	sbc	r23, r19
     a66:	84 0b       	sbc	r24, r20
     a68:	ba 0b       	sbc	r27, r26
     a6a:	ee 1f       	adc	r30, r30
     a6c:	88 f7       	brcc	.-30     	; 0xa50 <__divsf3_pse+0x94>
     a6e:	e0 95       	com	r30
     a70:	08 95       	ret

00000a72 <__floatunsisf>:
     a72:	e8 94       	clt
     a74:	09 c0       	rjmp	.+18     	; 0xa88 <__floatsisf+0x12>

00000a76 <__floatsisf>:
     a76:	97 fb       	bst	r25, 7
     a78:	3e f4       	brtc	.+14     	; 0xa88 <__floatsisf+0x12>
     a7a:	90 95       	com	r25
     a7c:	80 95       	com	r24
     a7e:	70 95       	com	r23
     a80:	61 95       	neg	r22
     a82:	7f 4f       	sbci	r23, 0xFF	; 255
     a84:	8f 4f       	sbci	r24, 0xFF	; 255
     a86:	9f 4f       	sbci	r25, 0xFF	; 255
     a88:	99 23       	and	r25, r25
     a8a:	a9 f0       	breq	.+42     	; 0xab6 <__floatsisf+0x40>
     a8c:	f9 2f       	mov	r31, r25
     a8e:	96 e9       	ldi	r25, 0x96	; 150
     a90:	bb 27       	eor	r27, r27
     a92:	93 95       	inc	r25
     a94:	f6 95       	lsr	r31
     a96:	87 95       	ror	r24
     a98:	77 95       	ror	r23
     a9a:	67 95       	ror	r22
     a9c:	b7 95       	ror	r27
     a9e:	f1 11       	cpse	r31, r1
     aa0:	f8 cf       	rjmp	.-16     	; 0xa92 <__floatsisf+0x1c>
     aa2:	fa f4       	brpl	.+62     	; 0xae2 <__floatsisf+0x6c>
     aa4:	bb 0f       	add	r27, r27
     aa6:	11 f4       	brne	.+4      	; 0xaac <__floatsisf+0x36>
     aa8:	60 ff       	sbrs	r22, 0
     aaa:	1b c0       	rjmp	.+54     	; 0xae2 <__floatsisf+0x6c>
     aac:	6f 5f       	subi	r22, 0xFF	; 255
     aae:	7f 4f       	sbci	r23, 0xFF	; 255
     ab0:	8f 4f       	sbci	r24, 0xFF	; 255
     ab2:	9f 4f       	sbci	r25, 0xFF	; 255
     ab4:	16 c0       	rjmp	.+44     	; 0xae2 <__floatsisf+0x6c>
     ab6:	88 23       	and	r24, r24
     ab8:	11 f0       	breq	.+4      	; 0xabe <__floatsisf+0x48>
     aba:	96 e9       	ldi	r25, 0x96	; 150
     abc:	11 c0       	rjmp	.+34     	; 0xae0 <__floatsisf+0x6a>
     abe:	77 23       	and	r23, r23
     ac0:	21 f0       	breq	.+8      	; 0xaca <__floatsisf+0x54>
     ac2:	9e e8       	ldi	r25, 0x8E	; 142
     ac4:	87 2f       	mov	r24, r23
     ac6:	76 2f       	mov	r23, r22
     ac8:	05 c0       	rjmp	.+10     	; 0xad4 <__floatsisf+0x5e>
     aca:	66 23       	and	r22, r22
     acc:	71 f0       	breq	.+28     	; 0xaea <__floatsisf+0x74>
     ace:	96 e8       	ldi	r25, 0x86	; 134
     ad0:	86 2f       	mov	r24, r22
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	2a f0       	brmi	.+10     	; 0xae2 <__floatsisf+0x6c>
     ad8:	9a 95       	dec	r25
     ada:	66 0f       	add	r22, r22
     adc:	77 1f       	adc	r23, r23
     ade:	88 1f       	adc	r24, r24
     ae0:	da f7       	brpl	.-10     	; 0xad8 <__floatsisf+0x62>
     ae2:	88 0f       	add	r24, r24
     ae4:	96 95       	lsr	r25
     ae6:	87 95       	ror	r24
     ae8:	97 f9       	bld	r25, 7
     aea:	08 95       	ret

00000aec <__fp_inf>:
     aec:	97 f9       	bld	r25, 7
     aee:	9f 67       	ori	r25, 0x7F	; 127
     af0:	80 e8       	ldi	r24, 0x80	; 128
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	08 95       	ret

00000af8 <__fp_nan>:
     af8:	9f ef       	ldi	r25, 0xFF	; 255
     afa:	80 ec       	ldi	r24, 0xC0	; 192
     afc:	08 95       	ret

00000afe <__fp_powser>:
     afe:	df 93       	push	r29
     b00:	cf 93       	push	r28
     b02:	1f 93       	push	r17
     b04:	0f 93       	push	r16
     b06:	ff 92       	push	r15
     b08:	ef 92       	push	r14
     b0a:	df 92       	push	r13
     b0c:	7b 01       	movw	r14, r22
     b0e:	8c 01       	movw	r16, r24
     b10:	68 94       	set
     b12:	06 c0       	rjmp	.+12     	; 0xb20 <__fp_powser+0x22>
     b14:	da 2e       	mov	r13, r26
     b16:	ef 01       	movw	r28, r30
     b18:	0e 94 09 06 	call	0xc12	; 0xc12 <__mulsf3x>
     b1c:	fe 01       	movw	r30, r28
     b1e:	e8 94       	clt
     b20:	a5 91       	lpm	r26, Z+
     b22:	25 91       	lpm	r18, Z+
     b24:	35 91       	lpm	r19, Z+
     b26:	45 91       	lpm	r20, Z+
     b28:	55 91       	lpm	r21, Z+
     b2a:	a6 f3       	brts	.-24     	; 0xb14 <__fp_powser+0x16>
     b2c:	ef 01       	movw	r28, r30
     b2e:	0e 94 43 04 	call	0x886	; 0x886 <__addsf3x>
     b32:	fe 01       	movw	r30, r28
     b34:	97 01       	movw	r18, r14
     b36:	a8 01       	movw	r20, r16
     b38:	da 94       	dec	r13
     b3a:	69 f7       	brne	.-38     	; 0xb16 <__fp_powser+0x18>
     b3c:	df 90       	pop	r13
     b3e:	ef 90       	pop	r14
     b40:	ff 90       	pop	r15
     b42:	0f 91       	pop	r16
     b44:	1f 91       	pop	r17
     b46:	cf 91       	pop	r28
     b48:	df 91       	pop	r29
     b4a:	08 95       	ret

00000b4c <__fp_pscA>:
     b4c:	00 24       	eor	r0, r0
     b4e:	0a 94       	dec	r0
     b50:	16 16       	cp	r1, r22
     b52:	17 06       	cpc	r1, r23
     b54:	18 06       	cpc	r1, r24
     b56:	09 06       	cpc	r0, r25
     b58:	08 95       	ret

00000b5a <__fp_pscB>:
     b5a:	00 24       	eor	r0, r0
     b5c:	0a 94       	dec	r0
     b5e:	12 16       	cp	r1, r18
     b60:	13 06       	cpc	r1, r19
     b62:	14 06       	cpc	r1, r20
     b64:	05 06       	cpc	r0, r21
     b66:	08 95       	ret

00000b68 <__fp_round>:
     b68:	09 2e       	mov	r0, r25
     b6a:	03 94       	inc	r0
     b6c:	00 0c       	add	r0, r0
     b6e:	11 f4       	brne	.+4      	; 0xb74 <__fp_round+0xc>
     b70:	88 23       	and	r24, r24
     b72:	52 f0       	brmi	.+20     	; 0xb88 <__fp_round+0x20>
     b74:	bb 0f       	add	r27, r27
     b76:	40 f4       	brcc	.+16     	; 0xb88 <__fp_round+0x20>
     b78:	bf 2b       	or	r27, r31
     b7a:	11 f4       	brne	.+4      	; 0xb80 <__fp_round+0x18>
     b7c:	60 ff       	sbrs	r22, 0
     b7e:	04 c0       	rjmp	.+8      	; 0xb88 <__fp_round+0x20>
     b80:	6f 5f       	subi	r22, 0xFF	; 255
     b82:	7f 4f       	sbci	r23, 0xFF	; 255
     b84:	8f 4f       	sbci	r24, 0xFF	; 255
     b86:	9f 4f       	sbci	r25, 0xFF	; 255
     b88:	08 95       	ret

00000b8a <__fp_split3>:
     b8a:	57 fd       	sbrc	r21, 7
     b8c:	90 58       	subi	r25, 0x80	; 128
     b8e:	44 0f       	add	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	59 f0       	breq	.+22     	; 0xbaa <__fp_splitA+0x10>
     b94:	5f 3f       	cpi	r21, 0xFF	; 255
     b96:	71 f0       	breq	.+28     	; 0xbb4 <__fp_splitA+0x1a>
     b98:	47 95       	ror	r20

00000b9a <__fp_splitA>:
     b9a:	88 0f       	add	r24, r24
     b9c:	97 fb       	bst	r25, 7
     b9e:	99 1f       	adc	r25, r25
     ba0:	61 f0       	breq	.+24     	; 0xbba <__fp_splitA+0x20>
     ba2:	9f 3f       	cpi	r25, 0xFF	; 255
     ba4:	79 f0       	breq	.+30     	; 0xbc4 <__fp_splitA+0x2a>
     ba6:	87 95       	ror	r24
     ba8:	08 95       	ret
     baa:	12 16       	cp	r1, r18
     bac:	13 06       	cpc	r1, r19
     bae:	14 06       	cpc	r1, r20
     bb0:	55 1f       	adc	r21, r21
     bb2:	f2 cf       	rjmp	.-28     	; 0xb98 <__fp_split3+0xe>
     bb4:	46 95       	lsr	r20
     bb6:	f1 df       	rcall	.-30     	; 0xb9a <__fp_splitA>
     bb8:	08 c0       	rjmp	.+16     	; 0xbca <__fp_splitA+0x30>
     bba:	16 16       	cp	r1, r22
     bbc:	17 06       	cpc	r1, r23
     bbe:	18 06       	cpc	r1, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	f1 cf       	rjmp	.-30     	; 0xba6 <__fp_splitA+0xc>
     bc4:	86 95       	lsr	r24
     bc6:	71 05       	cpc	r23, r1
     bc8:	61 05       	cpc	r22, r1
     bca:	08 94       	sec
     bcc:	08 95       	ret

00000bce <__fp_zero>:
     bce:	e8 94       	clt

00000bd0 <__fp_szero>:
     bd0:	bb 27       	eor	r27, r27
     bd2:	66 27       	eor	r22, r22
     bd4:	77 27       	eor	r23, r23
     bd6:	cb 01       	movw	r24, r22
     bd8:	97 f9       	bld	r25, 7
     bda:	08 95       	ret

00000bdc <inverse>:
     bdc:	9b 01       	movw	r18, r22
     bde:	ac 01       	movw	r20, r24
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	80 e8       	ldi	r24, 0x80	; 128
     be6:	9f e3       	ldi	r25, 0x3F	; 63
     be8:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__divsf3>

00000bec <__mulsf3>:
     bec:	0e 94 09 06 	call	0xc12	; 0xc12 <__mulsf3x>
     bf0:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_round>
     bf4:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fp_pscA>
     bf8:	38 f0       	brcs	.+14     	; 0xc08 <__mulsf3+0x1c>
     bfa:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_pscB>
     bfe:	20 f0       	brcs	.+8      	; 0xc08 <__mulsf3+0x1c>
     c00:	95 23       	and	r25, r21
     c02:	11 f0       	breq	.+4      	; 0xc08 <__mulsf3+0x1c>
     c04:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_inf>
     c08:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_nan>
     c0c:	11 24       	eor	r1, r1
     c0e:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_szero>

00000c12 <__mulsf3x>:
     c12:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__fp_split3>
     c16:	70 f3       	brcs	.-36     	; 0xbf4 <__mulsf3+0x8>

00000c18 <__mulsf3_pse>:
     c18:	95 9f       	mul	r25, r21
     c1a:	c1 f3       	breq	.-16     	; 0xc0c <__mulsf3+0x20>
     c1c:	95 0f       	add	r25, r21
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	55 1f       	adc	r21, r21
     c22:	62 9f       	mul	r22, r18
     c24:	f0 01       	movw	r30, r0
     c26:	72 9f       	mul	r23, r18
     c28:	bb 27       	eor	r27, r27
     c2a:	f0 0d       	add	r31, r0
     c2c:	b1 1d       	adc	r27, r1
     c2e:	63 9f       	mul	r22, r19
     c30:	aa 27       	eor	r26, r26
     c32:	f0 0d       	add	r31, r0
     c34:	b1 1d       	adc	r27, r1
     c36:	aa 1f       	adc	r26, r26
     c38:	64 9f       	mul	r22, r20
     c3a:	66 27       	eor	r22, r22
     c3c:	b0 0d       	add	r27, r0
     c3e:	a1 1d       	adc	r26, r1
     c40:	66 1f       	adc	r22, r22
     c42:	82 9f       	mul	r24, r18
     c44:	22 27       	eor	r18, r18
     c46:	b0 0d       	add	r27, r0
     c48:	a1 1d       	adc	r26, r1
     c4a:	62 1f       	adc	r22, r18
     c4c:	73 9f       	mul	r23, r19
     c4e:	b0 0d       	add	r27, r0
     c50:	a1 1d       	adc	r26, r1
     c52:	62 1f       	adc	r22, r18
     c54:	83 9f       	mul	r24, r19
     c56:	a0 0d       	add	r26, r0
     c58:	61 1d       	adc	r22, r1
     c5a:	22 1f       	adc	r18, r18
     c5c:	74 9f       	mul	r23, r20
     c5e:	33 27       	eor	r19, r19
     c60:	a0 0d       	add	r26, r0
     c62:	61 1d       	adc	r22, r1
     c64:	23 1f       	adc	r18, r19
     c66:	84 9f       	mul	r24, r20
     c68:	60 0d       	add	r22, r0
     c6a:	21 1d       	adc	r18, r1
     c6c:	82 2f       	mov	r24, r18
     c6e:	76 2f       	mov	r23, r22
     c70:	6a 2f       	mov	r22, r26
     c72:	11 24       	eor	r1, r1
     c74:	9f 57       	subi	r25, 0x7F	; 127
     c76:	50 40       	sbci	r21, 0x00	; 0
     c78:	9a f0       	brmi	.+38     	; 0xca0 <__mulsf3_pse+0x88>
     c7a:	f1 f0       	breq	.+60     	; 0xcb8 <__mulsf3_pse+0xa0>
     c7c:	88 23       	and	r24, r24
     c7e:	4a f0       	brmi	.+18     	; 0xc92 <__mulsf3_pse+0x7a>
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	bb 1f       	adc	r27, r27
     c86:	66 1f       	adc	r22, r22
     c88:	77 1f       	adc	r23, r23
     c8a:	88 1f       	adc	r24, r24
     c8c:	91 50       	subi	r25, 0x01	; 1
     c8e:	50 40       	sbci	r21, 0x00	; 0
     c90:	a9 f7       	brne	.-22     	; 0xc7c <__mulsf3_pse+0x64>
     c92:	9e 3f       	cpi	r25, 0xFE	; 254
     c94:	51 05       	cpc	r21, r1
     c96:	80 f0       	brcs	.+32     	; 0xcb8 <__mulsf3_pse+0xa0>
     c98:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_inf>
     c9c:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_szero>
     ca0:	5f 3f       	cpi	r21, 0xFF	; 255
     ca2:	e4 f3       	brlt	.-8      	; 0xc9c <__mulsf3_pse+0x84>
     ca4:	98 3e       	cpi	r25, 0xE8	; 232
     ca6:	d4 f3       	brlt	.-12     	; 0xc9c <__mulsf3_pse+0x84>
     ca8:	86 95       	lsr	r24
     caa:	77 95       	ror	r23
     cac:	67 95       	ror	r22
     cae:	b7 95       	ror	r27
     cb0:	f7 95       	ror	r31
     cb2:	e7 95       	ror	r30
     cb4:	9f 5f       	subi	r25, 0xFF	; 255
     cb6:	c1 f7       	brne	.-16     	; 0xca8 <__mulsf3_pse+0x90>
     cb8:	fe 2b       	or	r31, r30
     cba:	88 0f       	add	r24, r24
     cbc:	91 1d       	adc	r25, r1
     cbe:	96 95       	lsr	r25
     cc0:	87 95       	ror	r24
     cc2:	97 f9       	bld	r25, 7
     cc4:	08 95       	ret

00000cc6 <pow>:
     cc6:	fa 01       	movw	r30, r20
     cc8:	ee 0f       	add	r30, r30
     cca:	ff 1f       	adc	r31, r31
     ccc:	30 96       	adiw	r30, 0x00	; 0
     cce:	21 05       	cpc	r18, r1
     cd0:	31 05       	cpc	r19, r1
     cd2:	a1 f1       	breq	.+104    	; 0xd3c <pow+0x76>
     cd4:	61 15       	cp	r22, r1
     cd6:	71 05       	cpc	r23, r1
     cd8:	61 f4       	brne	.+24     	; 0xcf2 <pow+0x2c>
     cda:	80 38       	cpi	r24, 0x80	; 128
     cdc:	bf e3       	ldi	r27, 0x3F	; 63
     cde:	9b 07       	cpc	r25, r27
     ce0:	49 f1       	breq	.+82     	; 0xd34 <pow+0x6e>
     ce2:	68 94       	set
     ce4:	90 38       	cpi	r25, 0x80	; 128
     ce6:	81 05       	cpc	r24, r1
     ce8:	61 f0       	breq	.+24     	; 0xd02 <pow+0x3c>
     cea:	80 38       	cpi	r24, 0x80	; 128
     cec:	bf ef       	ldi	r27, 0xFF	; 255
     cee:	9b 07       	cpc	r25, r27
     cf0:	41 f0       	breq	.+16     	; 0xd02 <pow+0x3c>
     cf2:	99 23       	and	r25, r25
     cf4:	4a f5       	brpl	.+82     	; 0xd48 <pow+0x82>
     cf6:	ff 3f       	cpi	r31, 0xFF	; 255
     cf8:	e1 05       	cpc	r30, r1
     cfa:	31 05       	cpc	r19, r1
     cfc:	21 05       	cpc	r18, r1
     cfe:	19 f1       	breq	.+70     	; 0xd46 <pow+0x80>
     d00:	e8 94       	clt
     d02:	08 94       	sec
     d04:	e7 95       	ror	r30
     d06:	d9 01       	movw	r26, r18
     d08:	aa 23       	and	r26, r26
     d0a:	29 f4       	brne	.+10     	; 0xd16 <pow+0x50>
     d0c:	ab 2f       	mov	r26, r27
     d0e:	be 2f       	mov	r27, r30
     d10:	f8 5f       	subi	r31, 0xF8	; 248
     d12:	d0 f3       	brcs	.-12     	; 0xd08 <pow+0x42>
     d14:	10 c0       	rjmp	.+32     	; 0xd36 <pow+0x70>
     d16:	ff 5f       	subi	r31, 0xFF	; 255
     d18:	70 f4       	brcc	.+28     	; 0xd36 <pow+0x70>
     d1a:	a6 95       	lsr	r26
     d1c:	e0 f7       	brcc	.-8      	; 0xd16 <pow+0x50>
     d1e:	f7 39       	cpi	r31, 0x97	; 151
     d20:	50 f0       	brcs	.+20     	; 0xd36 <pow+0x70>
     d22:	19 f0       	breq	.+6      	; 0xd2a <pow+0x64>
     d24:	ff 3a       	cpi	r31, 0xAF	; 175
     d26:	38 f4       	brcc	.+14     	; 0xd36 <pow+0x70>
     d28:	9f 77       	andi	r25, 0x7F	; 127
     d2a:	9f 93       	push	r25
     d2c:	0d d0       	rcall	.+26     	; 0xd48 <pow+0x82>
     d2e:	0f 90       	pop	r0
     d30:	07 fc       	sbrc	r0, 7
     d32:	90 58       	subi	r25, 0x80	; 128
     d34:	08 95       	ret
     d36:	46 f0       	brts	.+16     	; 0xd48 <pow+0x82>
     d38:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_nan>
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	80 e8       	ldi	r24, 0x80	; 128
     d42:	9f e3       	ldi	r25, 0x3F	; 63
     d44:	08 95       	ret
     d46:	4f e7       	ldi	r20, 0x7F	; 127
     d48:	9f 77       	andi	r25, 0x7F	; 127
     d4a:	5f 93       	push	r21
     d4c:	4f 93       	push	r20
     d4e:	3f 93       	push	r19
     d50:	2f 93       	push	r18
     d52:	0e 94 8e 07 	call	0xf1c	; 0xf1c <log>
     d56:	2f 91       	pop	r18
     d58:	3f 91       	pop	r19
     d5a:	4f 91       	pop	r20
     d5c:	5f 91       	pop	r21
     d5e:	0e 94 f6 05 	call	0xbec	; 0xbec <__mulsf3>
     d62:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <exp>
     d66:	19 f4       	brne	.+6      	; 0xd6e <pow+0xa8>
     d68:	16 f4       	brtc	.+4      	; 0xd6e <pow+0xa8>
     d6a:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_nan>
     d6e:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__fp_mpack>

00000d72 <sqrt>:
     d72:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fp_splitA>
     d76:	b8 f3       	brcs	.-18     	; 0xd66 <pow+0xa0>
     d78:	99 23       	and	r25, r25
     d7a:	c9 f3       	breq	.-14     	; 0xd6e <pow+0xa8>
     d7c:	b6 f3       	brts	.-20     	; 0xd6a <pow+0xa4>
     d7e:	9f 57       	subi	r25, 0x7F	; 127
     d80:	55 0b       	sbc	r21, r21
     d82:	87 ff       	sbrs	r24, 7
     d84:	0e 94 45 07 	call	0xe8a	; 0xe8a <__fp_norm2>
     d88:	00 24       	eor	r0, r0
     d8a:	a0 e6       	ldi	r26, 0x60	; 96
     d8c:	40 ea       	ldi	r20, 0xA0	; 160
     d8e:	90 01       	movw	r18, r0
     d90:	80 58       	subi	r24, 0x80	; 128
     d92:	56 95       	lsr	r21
     d94:	97 95       	ror	r25
     d96:	28 f4       	brcc	.+10     	; 0xda2 <sqrt+0x30>
     d98:	80 5c       	subi	r24, 0xC0	; 192
     d9a:	66 0f       	add	r22, r22
     d9c:	77 1f       	adc	r23, r23
     d9e:	88 1f       	adc	r24, r24
     da0:	20 f0       	brcs	.+8      	; 0xdaa <sqrt+0x38>
     da2:	26 17       	cp	r18, r22
     da4:	37 07       	cpc	r19, r23
     da6:	48 07       	cpc	r20, r24
     da8:	30 f4       	brcc	.+12     	; 0xdb6 <sqrt+0x44>
     daa:	62 1b       	sub	r22, r18
     dac:	73 0b       	sbc	r23, r19
     dae:	84 0b       	sbc	r24, r20
     db0:	20 29       	or	r18, r0
     db2:	31 29       	or	r19, r1
     db4:	4a 2b       	or	r20, r26
     db6:	a6 95       	lsr	r26
     db8:	17 94       	ror	r1
     dba:	07 94       	ror	r0
     dbc:	20 25       	eor	r18, r0
     dbe:	31 25       	eor	r19, r1
     dc0:	4a 27       	eor	r20, r26
     dc2:	58 f7       	brcc	.-42     	; 0xd9a <sqrt+0x28>
     dc4:	66 0f       	add	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	88 1f       	adc	r24, r24
     dca:	20 f0       	brcs	.+8      	; 0xdd4 <sqrt+0x62>
     dcc:	26 17       	cp	r18, r22
     dce:	37 07       	cpc	r19, r23
     dd0:	48 07       	cpc	r20, r24
     dd2:	30 f4       	brcc	.+12     	; 0xde0 <sqrt+0x6e>
     dd4:	62 0b       	sbc	r22, r18
     dd6:	73 0b       	sbc	r23, r19
     dd8:	84 0b       	sbc	r24, r20
     dda:	20 0d       	add	r18, r0
     ddc:	31 1d       	adc	r19, r1
     dde:	41 1d       	adc	r20, r1
     de0:	a0 95       	com	r26
     de2:	81 f7       	brne	.-32     	; 0xdc4 <sqrt+0x52>
     de4:	b9 01       	movw	r22, r18
     de6:	84 2f       	mov	r24, r20
     de8:	91 58       	subi	r25, 0x81	; 129
     dea:	88 0f       	add	r24, r24
     dec:	96 95       	lsr	r25
     dee:	87 95       	ror	r24
     df0:	08 95       	ret

00000df2 <square>:
     df2:	9b 01       	movw	r18, r22
     df4:	ac 01       	movw	r20, r24
     df6:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__mulsf3>
     dfa:	29 f4       	brne	.+10     	; 0xe06 <square+0x14>
     dfc:	16 f0       	brts	.+4      	; 0xe02 <square+0x10>
     dfe:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_inf>
     e02:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__fp_zero>
     e06:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_nan>

00000e0a <exp>:
     e0a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fp_splitA>
     e0e:	a8 f3       	brcs	.-22     	; 0xdfa <square+0x8>
     e10:	96 38       	cpi	r25, 0x86	; 134
     e12:	a0 f7       	brcc	.-24     	; 0xdfc <square+0xa>
     e14:	07 f8       	bld	r0, 7
     e16:	0f 92       	push	r0
     e18:	e8 94       	clt
     e1a:	2b e3       	ldi	r18, 0x3B	; 59
     e1c:	3a ea       	ldi	r19, 0xAA	; 170
     e1e:	48 eb       	ldi	r20, 0xB8	; 184
     e20:	5f e7       	ldi	r21, 0x7F	; 127
     e22:	0e 94 0c 06 	call	0xc18	; 0xc18 <__mulsf3_pse>
     e26:	0f 92       	push	r0
     e28:	0f 92       	push	r0
     e2a:	0f 92       	push	r0
     e2c:	4d b7       	in	r20, 0x3d	; 61
     e2e:	5e b7       	in	r21, 0x3e	; 62
     e30:	0f 92       	push	r0
     e32:	0e 94 d6 07 	call	0xfac	; 0xfac <modf>
     e36:	e1 ee       	ldi	r30, 0xE1	; 225
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	0e 94 7f 05 	call	0xafe	; 0xafe <__fp_powser>
     e3e:	4f 91       	pop	r20
     e40:	5f 91       	pop	r21
     e42:	ef 91       	pop	r30
     e44:	ff 91       	pop	r31
     e46:	e5 95       	asr	r30
     e48:	ee 1f       	adc	r30, r30
     e4a:	ff 1f       	adc	r31, r31
     e4c:	49 f0       	breq	.+18     	; 0xe60 <exp+0x56>
     e4e:	fe 57       	subi	r31, 0x7E	; 126
     e50:	e0 68       	ori	r30, 0x80	; 128
     e52:	44 27       	eor	r20, r20
     e54:	ee 0f       	add	r30, r30
     e56:	44 1f       	adc	r20, r20
     e58:	fa 95       	dec	r31
     e5a:	e1 f7       	brne	.-8      	; 0xe54 <exp+0x4a>
     e5c:	41 95       	neg	r20
     e5e:	55 0b       	sbc	r21, r21
     e60:	0e 94 50 07 	call	0xea0	; 0xea0 <ldexp>
     e64:	0f 90       	pop	r0
     e66:	07 fe       	sbrs	r0, 7
     e68:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <inverse>
     e6c:	08 95       	ret

00000e6e <__fp_mpack>:
     e6e:	9f 3f       	cpi	r25, 0xFF	; 255
     e70:	31 f0       	breq	.+12     	; 0xe7e <__fp_mpack_finite+0xc>

00000e72 <__fp_mpack_finite>:
     e72:	91 50       	subi	r25, 0x01	; 1
     e74:	20 f4       	brcc	.+8      	; 0xe7e <__fp_mpack_finite+0xc>
     e76:	87 95       	ror	r24
     e78:	77 95       	ror	r23
     e7a:	67 95       	ror	r22
     e7c:	b7 95       	ror	r27
     e7e:	88 0f       	add	r24, r24
     e80:	91 1d       	adc	r25, r1
     e82:	96 95       	lsr	r25
     e84:	87 95       	ror	r24
     e86:	97 f9       	bld	r25, 7
     e88:	08 95       	ret

00000e8a <__fp_norm2>:
     e8a:	91 50       	subi	r25, 0x01	; 1
     e8c:	50 40       	sbci	r21, 0x00	; 0
     e8e:	66 0f       	add	r22, r22
     e90:	77 1f       	adc	r23, r23
     e92:	88 1f       	adc	r24, r24
     e94:	d2 f7       	brpl	.-12     	; 0xe8a <__fp_norm2>
     e96:	08 95       	ret
     e98:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_inf>
     e9c:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__fp_mpack>

00000ea0 <ldexp>:
     ea0:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fp_splitA>
     ea4:	d8 f3       	brcs	.-10     	; 0xe9c <__fp_norm2+0x12>
     ea6:	99 23       	and	r25, r25
     ea8:	c9 f3       	breq	.-14     	; 0xe9c <__fp_norm2+0x12>
     eaa:	94 0f       	add	r25, r20
     eac:	51 1d       	adc	r21, r1
     eae:	a3 f3       	brvs	.-24     	; 0xe98 <__fp_norm2+0xe>
     eb0:	91 50       	subi	r25, 0x01	; 1
     eb2:	50 40       	sbci	r21, 0x00	; 0
     eb4:	94 f0       	brlt	.+36     	; 0xeda <ldexp+0x3a>
     eb6:	59 f0       	breq	.+22     	; 0xece <ldexp+0x2e>
     eb8:	88 23       	and	r24, r24
     eba:	32 f0       	brmi	.+12     	; 0xec8 <ldexp+0x28>
     ebc:	66 0f       	add	r22, r22
     ebe:	77 1f       	adc	r23, r23
     ec0:	88 1f       	adc	r24, r24
     ec2:	91 50       	subi	r25, 0x01	; 1
     ec4:	50 40       	sbci	r21, 0x00	; 0
     ec6:	c1 f7       	brne	.-16     	; 0xeb8 <ldexp+0x18>
     ec8:	9e 3f       	cpi	r25, 0xFE	; 254
     eca:	51 05       	cpc	r21, r1
     ecc:	2c f7       	brge	.-54     	; 0xe98 <__fp_norm2+0xe>
     ece:	88 0f       	add	r24, r24
     ed0:	91 1d       	adc	r25, r1
     ed2:	96 95       	lsr	r25
     ed4:	87 95       	ror	r24
     ed6:	97 f9       	bld	r25, 7
     ed8:	08 95       	ret
     eda:	5f 3f       	cpi	r21, 0xFF	; 255
     edc:	ac f0       	brlt	.+42     	; 0xf08 <ldexp+0x68>
     ede:	98 3e       	cpi	r25, 0xE8	; 232
     ee0:	9c f0       	brlt	.+38     	; 0xf08 <ldexp+0x68>
     ee2:	bb 27       	eor	r27, r27
     ee4:	86 95       	lsr	r24
     ee6:	77 95       	ror	r23
     ee8:	67 95       	ror	r22
     eea:	b7 95       	ror	r27
     eec:	08 f4       	brcc	.+2      	; 0xef0 <ldexp+0x50>
     eee:	b1 60       	ori	r27, 0x01	; 1
     ef0:	93 95       	inc	r25
     ef2:	c1 f7       	brne	.-16     	; 0xee4 <ldexp+0x44>
     ef4:	bb 0f       	add	r27, r27
     ef6:	58 f7       	brcc	.-42     	; 0xece <ldexp+0x2e>
     ef8:	11 f4       	brne	.+4      	; 0xefe <ldexp+0x5e>
     efa:	60 ff       	sbrs	r22, 0
     efc:	e8 cf       	rjmp	.-48     	; 0xece <ldexp+0x2e>
     efe:	6f 5f       	subi	r22, 0xFF	; 255
     f00:	7f 4f       	sbci	r23, 0xFF	; 255
     f02:	8f 4f       	sbci	r24, 0xFF	; 255
     f04:	9f 4f       	sbci	r25, 0xFF	; 255
     f06:	e3 cf       	rjmp	.-58     	; 0xece <ldexp+0x2e>
     f08:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_szero>
     f0c:	16 f0       	brts	.+4      	; 0xf12 <ldexp+0x72>
     f0e:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__fp_mpack>
     f12:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_nan>
     f16:	68 94       	set
     f18:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_inf>

00000f1c <log>:
     f1c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fp_splitA>
     f20:	a8 f3       	brcs	.-22     	; 0xf0c <ldexp+0x6c>
     f22:	99 23       	and	r25, r25
     f24:	c1 f3       	breq	.-16     	; 0xf16 <ldexp+0x76>
     f26:	ae f3       	brts	.-22     	; 0xf12 <ldexp+0x72>
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	1f 93       	push	r17
     f2e:	0f 93       	push	r16
     f30:	ff 92       	push	r15
     f32:	c9 2f       	mov	r28, r25
     f34:	dd 27       	eor	r29, r29
     f36:	88 23       	and	r24, r24
     f38:	2a f0       	brmi	.+10     	; 0xf44 <log+0x28>
     f3a:	21 97       	sbiw	r28, 0x01	; 1
     f3c:	66 0f       	add	r22, r22
     f3e:	77 1f       	adc	r23, r23
     f40:	88 1f       	adc	r24, r24
     f42:	da f7       	brpl	.-10     	; 0xf3a <log+0x1e>
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e8       	ldi	r20, 0x80	; 128
     f4a:	5f eb       	ldi	r21, 0xBF	; 191
     f4c:	9f e3       	ldi	r25, 0x3F	; 63
     f4e:	88 39       	cpi	r24, 0x98	; 152
     f50:	20 f0       	brcs	.+8      	; 0xf5a <log+0x3e>
     f52:	80 3e       	cpi	r24, 0xE0	; 224
     f54:	38 f0       	brcs	.+14     	; 0xf64 <log+0x48>
     f56:	21 96       	adiw	r28, 0x01	; 1
     f58:	8f 77       	andi	r24, 0x7F	; 127
     f5a:	0e 94 2c 04 	call	0x858	; 0x858 <__addsf3>
     f5e:	e9 e0       	ldi	r30, 0x09	; 9
     f60:	f1 e0       	ldi	r31, 0x01	; 1
     f62:	04 c0       	rjmp	.+8      	; 0xf6c <log+0x50>
     f64:	0e 94 2c 04 	call	0x858	; 0x858 <__addsf3>
     f68:	e6 e3       	ldi	r30, 0x36	; 54
     f6a:	f1 e0       	ldi	r31, 0x01	; 1
     f6c:	0e 94 7f 05 	call	0xafe	; 0xafe <__fp_powser>
     f70:	8b 01       	movw	r16, r22
     f72:	be 01       	movw	r22, r28
     f74:	ec 01       	movw	r28, r24
     f76:	fb 2e       	mov	r15, r27
     f78:	6f 57       	subi	r22, 0x7F	; 127
     f7a:	71 09       	sbc	r23, r1
     f7c:	75 95       	asr	r23
     f7e:	77 1f       	adc	r23, r23
     f80:	88 0b       	sbc	r24, r24
     f82:	99 0b       	sbc	r25, r25
     f84:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
     f88:	28 e1       	ldi	r18, 0x18	; 24
     f8a:	32 e7       	ldi	r19, 0x72	; 114
     f8c:	41 e3       	ldi	r20, 0x31	; 49
     f8e:	5f e3       	ldi	r21, 0x3F	; 63
     f90:	0e 94 09 06 	call	0xc12	; 0xc12 <__mulsf3x>
     f94:	af 2d       	mov	r26, r15
     f96:	98 01       	movw	r18, r16
     f98:	ae 01       	movw	r20, r28
     f9a:	ff 90       	pop	r15
     f9c:	0f 91       	pop	r16
     f9e:	1f 91       	pop	r17
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	0e 94 43 04 	call	0x886	; 0x886 <__addsf3x>
     fa8:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_round>

00000fac <modf>:
     fac:	fa 01       	movw	r30, r20
     fae:	dc 01       	movw	r26, r24
     fb0:	aa 0f       	add	r26, r26
     fb2:	bb 1f       	adc	r27, r27
     fb4:	9b 01       	movw	r18, r22
     fb6:	ac 01       	movw	r20, r24
     fb8:	bf 57       	subi	r27, 0x7F	; 127
     fba:	28 f4       	brcc	.+10     	; 0xfc6 <modf+0x1a>
     fbc:	22 27       	eor	r18, r18
     fbe:	33 27       	eor	r19, r19
     fc0:	44 27       	eor	r20, r20
     fc2:	50 78       	andi	r21, 0x80	; 128
     fc4:	20 c0       	rjmp	.+64     	; 0x1006 <modf+0x5a>
     fc6:	b7 51       	subi	r27, 0x17	; 23
     fc8:	90 f4       	brcc	.+36     	; 0xfee <modf+0x42>
     fca:	ab 2f       	mov	r26, r27
     fcc:	00 24       	eor	r0, r0
     fce:	46 95       	lsr	r20
     fd0:	37 95       	ror	r19
     fd2:	27 95       	ror	r18
     fd4:	01 1c       	adc	r0, r1
     fd6:	a3 95       	inc	r26
     fd8:	d2 f3       	brmi	.-12     	; 0xfce <modf+0x22>
     fda:	00 20       	and	r0, r0
     fdc:	71 f0       	breq	.+28     	; 0xffa <modf+0x4e>
     fde:	22 0f       	add	r18, r18
     fe0:	33 1f       	adc	r19, r19
     fe2:	44 1f       	adc	r20, r20
     fe4:	b3 95       	inc	r27
     fe6:	da f3       	brmi	.-10     	; 0xfde <modf+0x32>
     fe8:	0e d0       	rcall	.+28     	; 0x1006 <modf+0x5a>
     fea:	0c 94 2b 04 	jmp	0x856	; 0x856 <__subsf3>
     fee:	61 30       	cpi	r22, 0x01	; 1
     ff0:	71 05       	cpc	r23, r1
     ff2:	a0 e8       	ldi	r26, 0x80	; 128
     ff4:	8a 07       	cpc	r24, r26
     ff6:	b9 46       	sbci	r27, 0x69	; 105
     ff8:	30 f4       	brcc	.+12     	; 0x1006 <modf+0x5a>
     ffa:	9b 01       	movw	r18, r22
     ffc:	ac 01       	movw	r20, r24
     ffe:	66 27       	eor	r22, r22
    1000:	77 27       	eor	r23, r23
    1002:	88 27       	eor	r24, r24
    1004:	90 78       	andi	r25, 0x80	; 128
    1006:	30 96       	adiw	r30, 0x00	; 0
    1008:	21 f0       	breq	.+8      	; 0x1012 <modf+0x66>
    100a:	20 83       	st	Z, r18
    100c:	31 83       	std	Z+1, r19	; 0x01
    100e:	42 83       	std	Z+2, r20	; 0x02
    1010:	53 83       	std	Z+3, r21	; 0x03
    1012:	08 95       	ret

00001014 <__itoa_ncheck>:
    1014:	bb 27       	eor	r27, r27
    1016:	4a 30       	cpi	r20, 0x0A	; 10
    1018:	31 f4       	brne	.+12     	; 0x1026 <__itoa_ncheck+0x12>
    101a:	99 23       	and	r25, r25
    101c:	22 f4       	brpl	.+8      	; 0x1026 <__itoa_ncheck+0x12>
    101e:	bd e2       	ldi	r27, 0x2D	; 45
    1020:	90 95       	com	r25
    1022:	81 95       	neg	r24
    1024:	9f 4f       	sbci	r25, 0xFF	; 255
    1026:	0c 94 16 08 	jmp	0x102c	; 0x102c <__utoa_common>

0000102a <__utoa_ncheck>:
    102a:	bb 27       	eor	r27, r27

0000102c <__utoa_common>:
    102c:	fb 01       	movw	r30, r22
    102e:	55 27       	eor	r21, r21
    1030:	aa 27       	eor	r26, r26
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	aa 1f       	adc	r26, r26
    1038:	a4 17       	cp	r26, r20
    103a:	10 f0       	brcs	.+4      	; 0x1040 <__utoa_common+0x14>
    103c:	a4 1b       	sub	r26, r20
    103e:	83 95       	inc	r24
    1040:	50 51       	subi	r21, 0x10	; 16
    1042:	b9 f7       	brne	.-18     	; 0x1032 <__utoa_common+0x6>
    1044:	a0 5d       	subi	r26, 0xD0	; 208
    1046:	aa 33       	cpi	r26, 0x3A	; 58
    1048:	08 f0       	brcs	.+2      	; 0x104c <__utoa_common+0x20>
    104a:	a9 5d       	subi	r26, 0xD9	; 217
    104c:	a1 93       	st	Z+, r26
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	79 f7       	brne	.-34     	; 0x1030 <__utoa_common+0x4>
    1052:	b1 11       	cpse	r27, r1
    1054:	b1 93       	st	Z+, r27
    1056:	11 92       	st	Z+, r1
    1058:	cb 01       	movw	r24, r22
    105a:	0c 94 2f 08 	jmp	0x105e	; 0x105e <strrev>

0000105e <strrev>:
    105e:	dc 01       	movw	r26, r24
    1060:	fc 01       	movw	r30, r24
    1062:	67 2f       	mov	r22, r23
    1064:	71 91       	ld	r23, Z+
    1066:	77 23       	and	r23, r23
    1068:	e1 f7       	brne	.-8      	; 0x1062 <strrev+0x4>
    106a:	32 97       	sbiw	r30, 0x02	; 2
    106c:	04 c0       	rjmp	.+8      	; 0x1076 <strrev+0x18>
    106e:	7c 91       	ld	r23, X
    1070:	6d 93       	st	X+, r22
    1072:	70 83       	st	Z, r23
    1074:	62 91       	ld	r22, -Z
    1076:	ae 17       	cp	r26, r30
    1078:	bf 07       	cpc	r27, r31
    107a:	c8 f3       	brcs	.-14     	; 0x106e <strrev+0x10>
    107c:	08 95       	ret

0000107e <_exit>:
    107e:	f8 94       	cli

00001080 <__stop_program>:
    1080:	ff cf       	rjmp	.-2      	; 0x1080 <__stop_program>
